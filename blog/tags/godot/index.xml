<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Godot on KCC Blog </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>/blog/tags/godot/index.xml</link>
    <language>en-us</language>
    
    <copyright>KidsCanCode LLC</copyright>
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>Godot 101 - Part 9: Arcade Physics (KinematicBody2D)</title>
      <link>/blog/2017/04/godot_101_09/</link>
      <pubDate>Mon, 03 Apr 2017 05:22:12 PDT</pubDate>
      
      <guid>/blog/2017/04/godot_101_09/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 9 of &amp;ldquo;Godot 101&amp;rdquo;. In this installment, we&amp;rsquo;ll learn about how to do simple arcade-style physics using Godot&amp;rsquo;s built-in physics engine.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/oy9L0b5X0BY&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;new-project-and-game-art&#34;&gt;New Project and Game Art&lt;/h2&gt;

&lt;p&gt;For this lesson, we&amp;rsquo;re going to start by creating a new Godot project and a new scene.  The art we will use can be found on &lt;a href=&#34;http://opengameart.org/content/red-haired-run-and-jump-sprite-sheets&#34;&gt;OpenGameArt&lt;/a&gt;.  It contains the images for a few different character animations:&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Idle&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Running&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;sub&gt;&lt;img src=&#34;/blog/blog/img/godot101_09_01.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;/blog/blog/img/godot101_09_02.gif&#34; width=&#34;350&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Unpack it all into the &lt;code&gt;art&lt;/code&gt; folder in your project (I made a &lt;code&gt;player&lt;/code&gt; folder to put it all in).  We&amp;rsquo;ll talk about how to use these animations for our player character soon, but first we will create the scene and make the character move.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-the-scene&#34;&gt;Setting up the Scene&lt;/h3&gt;

&lt;p&gt;As we discussed earlier, there are 3 types of &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_physicsbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;PhysicsBody2D&lt;/code&gt;&lt;/a&gt; in Godot.  The one we will use for this project is the &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_kinematicbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_kinematic_body_2d&#34;&gt;
&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_kinematic_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;KinematicBody2D&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This node type has basic collision physics and movement, and is perfect for arcade-style games where you don&amp;rsquo;t need accurate, realistic physics.  Create the following scene tree and save it as &lt;code&gt;player.tscn&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_kinematic_body_2d&#34;&gt;
&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_kinematic_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;player (KinematicBody2D)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;sprite (Sprite)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_collision_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_collision_shape_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;collision (CollisionShape2D)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;sprite&lt;/code&gt; texture, drag the first frame of the idle animation (&lt;code&gt;idle-frame-1.png&lt;/code&gt;) into the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_texture&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_texture&#34;&gt;&lt;/svg&gt; &lt;code&gt;Texture&lt;/code&gt; field in the Inspector.&lt;/p&gt;

&lt;p&gt;The first thing you&amp;rsquo;ll notice is that the character is &lt;em&gt;huge&lt;/em&gt;.  This art was created at a very high resolution (which is nice - but it&amp;rsquo;s way too big for our screen).  Scroll down to the &lt;code&gt;Scale&lt;/code&gt; property and set it to &lt;code&gt;(0.2, 0.2)&lt;/code&gt; for a much more reasonable size.&lt;/p&gt;

&lt;p&gt;Now we can create the collision shape.  There are many different ways you can set up your collisions with different shapes, but for this exercise we&amp;rsquo;re going to choose the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_capsule_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_capsule_shape_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;CapsuleShape2D&lt;/code&gt;, which is a common choice for platformer characters.  Drag the size handles so that it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_09_03.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_09_03.png&#34; width=&#34;150&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Now we&amp;rsquo;re ready to write some code, so right-click on the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_kinematic_body_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_kinematic_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;player&lt;/code&gt; node and choose &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_script&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_script&#34;&gt;&lt;/svg&gt; &amp;ldquo;&lt;code&gt;Add Script&lt;/code&gt;&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;simple-physics&#34;&gt;Simple Physics&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s our starting point for the player script:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KinematicBody2D&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ACCEL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1500&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAX_SPEED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FRICTION&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;set_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First, we have 3 constants to adjust the player&amp;rsquo;s behavior:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ACCEL&lt;/code&gt; is how fast the player accelerates when a key is pressed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MAX_SPEED&lt;/code&gt; is the maximum speed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FRICTION&lt;/code&gt; controls how quickly the player comes to a stop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we have two &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_vector2.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Vector2&lt;/code&gt;&lt;/a&gt; variables to store the player&amp;rsquo;s movement.&lt;/p&gt;

&lt;p&gt;Finally, we are using the &lt;code&gt;fixed_process()&lt;/code&gt; function for per-frame code. This is recommended for physics bodies because the &lt;code&gt;delta&lt;/code&gt; time is fixed to &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;60&lt;/sub&gt; s (0.01667 s) and Godot&amp;rsquo;s physics engine works best with a fixed timestep.&lt;/p&gt;

&lt;p&gt;Now, let&amp;rsquo;s add the controls:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;ui_right&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;ui_left&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ACCEL&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FRICTION&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_SPEED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAX_SPEED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We start by getting the direction from the user&amp;rsquo;s input.  Each &lt;code&gt;is_action_pressed()&lt;/code&gt; results in either 0 or 1, so we will have a value of &lt;code&gt;1&lt;/code&gt; if &lt;code&gt;&amp;quot;ui_right&amp;quot;&lt;/code&gt; is pressed and &lt;code&gt;-1&lt;/code&gt; if &lt;code&gt;&amp;quot;ui_left&amp;quot;&lt;/code&gt; is pressed (these actions are mapped to the arrow keys by default). Note that if both keys are pressed, the result is &lt;code&gt;0&lt;/code&gt; - they cancel out.&lt;/p&gt;

&lt;p&gt;We then multiply this direction value by &lt;code&gt;ACCEL&lt;/code&gt; to get the correct magnitude and apply it to &lt;code&gt;vel&lt;/code&gt; for the updated speed.  The &lt;code&gt;clamp()&lt;/code&gt; function is used to keep the value of &lt;code&gt;vel.x&lt;/code&gt; from going above or below the &lt;code&gt;MAX_SPEED&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;If the player is not pressing a key (&lt;code&gt;acc.x&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;), then we apply &lt;code&gt;FRICTION&lt;/code&gt;, which will slow the player down.&lt;/p&gt;

&lt;p&gt;Now, if you followed the earlier tutorials, where we used an &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_area2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;Area2D&lt;/code&gt;&lt;/a&gt; node, you&amp;rsquo;ll recall we moved the object by using &lt;code&gt;set_pos()&lt;/code&gt;.  This is not correct for PhysicsBodies, because Godot needs to simulate them &lt;em&gt;moving&lt;/em&gt;, not teleporting to a new position.  Always use &lt;code&gt;move()&lt;/code&gt; to move a PhysicsBody or you may find things not working the way you expect.&lt;/p&gt;

&lt;p&gt;Press &amp;ldquo;Play&amp;rdquo; and try moving around.&lt;/p&gt;

&lt;h3 id=&#34;platforms-somewhere-to-fall&#34;&gt;Platforms: Somewhere to Fall&lt;/h3&gt;

&lt;p&gt;The next logical thing to add would be gravity, but then our player would just fall off the screen, so let&amp;rsquo;s add a platform to land on.  Create a new scene - this time we&amp;rsquo;re going to use &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_staticbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_static_body_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_static_body_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;StaticBody2D&lt;/code&gt;&lt;/a&gt; for the root node.  Set up the tree like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_static_body_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_static_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;platform&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;sprite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_collision_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_collision_shape_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;collision&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;re using &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_staticbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_static_body_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_static_body_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;StaticBody2D&lt;/code&gt;&lt;/a&gt; because it is a PhysicsBody that is optimized for static objects - things that don&amp;rsquo;t move, but just need to collide with other bodies.&lt;/p&gt;

&lt;p&gt;For the sprite, we&amp;rsquo;re going to use this simple colored square texture:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/green_square.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/green_square.png&#34; width=&#34;32&#34;&gt;&lt;/a&gt;&lt;sub&gt;Save this in your &amp;lsquo;art&amp;rsquo; folder&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Set this image as the sprite&amp;rsquo;s texture, and then we&amp;rsquo;ll use the &lt;code&gt;Scale&lt;/code&gt; property to size the platform.  Set it to &lt;code&gt;(20, 1)&lt;/code&gt; and then add a &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_rectangle_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_rectangle_shape_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;RectangleShape2D&lt;/code&gt; to the &lt;code&gt;collision&lt;/code&gt; node and size it to cover the sprite.&lt;/p&gt;

&lt;h3 id=&#34;adding-gravity&#34;&gt;Adding Gravity&lt;/h3&gt;

&lt;p&gt;Now let&amp;rsquo;s put it all together.  Create a new scene with a &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_node&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_node&#34;&gt;&lt;/svg&gt; &lt;code&gt;main&lt;/code&gt; node and click the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_instance&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_instance&#34;&gt;&lt;/svg&gt; &lt;code&gt;Instance&lt;/code&gt; button to add an instance of &lt;code&gt;player&lt;/code&gt; and &lt;code&gt;platform&lt;/code&gt;.  Arrange them in the scene like so:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_09_04.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_09_04.png&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Next, add the following to &lt;code&gt;player.gd&lt;/code&gt; and press &lt;code&gt;Play&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GRAVITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2000&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GRAVITY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see the player fall (due to &lt;code&gt;GRAVITY&lt;/code&gt; accelerating downward) and stop when it hits the platform.  But now you will find a new problem: the player can no longer move!&lt;/p&gt;

&lt;h3 id=&#34;collision-response&#34;&gt;Collision Response&lt;/h3&gt;

&lt;p&gt;The reason for this has to do with how our movement works, and what we do (or don&amp;rsquo;t do) when a collision occurs.  Here is our normal movement situation, when there are no obstacles:
&lt;img src=&#34;/blog/blog/img/godot101_09_05.png&#34; width=&#34;400&#34;&gt;&lt;/p&gt;

&lt;p&gt;Two forces are acting on the player (gravity, and the movement input) so the result is a diagonal vector.  However, if there is an obstacle in the path, we have this:
&lt;img src=&#34;/blog/blog/img/godot101_09_06.png&#34; width=&#34;400&#34;&gt;&lt;/p&gt;

&lt;p&gt;When Godot detects a collision with another &lt;code&gt;PhysicsBody2D&lt;/code&gt;, it immediately stops the movement.  Note that there is still a remaining portion of the movement vector that is unused.  In fact, this situation happens also when the player is standing on the platform:
&lt;img src=&#34;/blog/blog/img/godot101_09_07.png&#34; width=&#34;400&#34;&gt;&lt;/p&gt;

&lt;p&gt;Because the desired movement vector results in a collision, the movement is &lt;em&gt;immediately&lt;/em&gt; stopped, even though you may be pressing the arrow keys.&lt;/p&gt;

&lt;p&gt;Here is how this problem is solved:
&lt;img src=&#34;/blog/blog/img/godot101_09_08.png&#34; width=&#34;400&#34;&gt;&lt;/p&gt;

&lt;p&gt;We start by finding the &lt;em&gt;collision normal&lt;/em&gt;.  A &lt;em&gt;normal&lt;/em&gt; is a vector of length &lt;code&gt;1&lt;/code&gt; that is perpendicular to a surface.  It essentially tells us which way the surface is oriented.  In the case of our horizontal platform, the normal vector is &lt;code&gt;(0, -1)&lt;/code&gt;.  We can then use that normal to &lt;em&gt;slide&lt;/em&gt; the movement vector along the surface.&lt;/p&gt;

&lt;p&gt;Add the following code to  &lt;code&gt;fixed_process()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;motion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_colliding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_collision_normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;motion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;motion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;motion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First the &lt;code&gt;move()&lt;/code&gt; function we used before has a return value of the remaining movement vector, which we&amp;rsquo;re calling &lt;code&gt;motion&lt;/code&gt;.  Next we use &lt;code&gt;is_colliding()&lt;/code&gt; to check if a collision has happened.  If so, we find the collision normal and &lt;code&gt;slide&lt;/code&gt; the &lt;code&gt;motion&lt;/code&gt; and &lt;code&gt;vel&lt;/code&gt; vectors along it.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Those are the basics of using the &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_kinematicbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_kinematic_body_2d&#34;&gt;
&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_kinematic_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;KinematicBody2D&lt;/code&gt;&lt;/a&gt; node.  In the next installment, we&amp;rsquo;ll add jumping as well as add animation to the player.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-godot-101-part-10-coming-soon-a&#34;&gt;&lt;a href=&#34;&#34;&gt;Godot 101 - Part 10 (coming soon)&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 8: Tweens and Timers</title>
      <link>/blog/2017/03/godot_101_08/</link>
      <pubDate>Sat, 18 Mar 2017 05:22:12 PDT</pubDate>
      
      <guid>/blog/2017/03/godot_101_08/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 8 of &amp;ldquo;Godot 101&amp;rdquo;. In this installment, we&amp;rsquo;ll learn about two of the simplest yet most useful nodes in Godot: the &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_tween.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_tween&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_tween&#34;&gt;&lt;/svg&gt;Tween&lt;/a&gt; and the &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_timer&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_timer&#34;&gt;&lt;/svg&gt;Timer&lt;/a&gt;.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/ToXknbBmCr8&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h3 id=&#34;adding-visual-appeal&#34;&gt;Adding visual appeal&lt;/h3&gt;

&lt;p&gt;In game design circles, it&amp;rsquo;s sometimes called &amp;ldquo;juice&amp;rdquo; - the little visual effects that make the difference between a game that&amp;rsquo;s boring and a game that feels great to play.&lt;/p&gt;

&lt;p&gt;Collecting the gems is a perfect example of a place where we could add a little juice.  It&amp;rsquo;s not very visually appealing to see the gems just vanish like they do now.  Instead, we&amp;rsquo;re going to use a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_tween.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_tween&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_tween&#34;&gt;&lt;/svg&gt;Tween&lt;/a&gt; to juice things up. Add a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_tween.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_tween&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_tween&#34;&gt;&lt;/svg&gt;Tween&lt;/a&gt; to the &lt;code&gt;gem&lt;/code&gt; scene and name it &lt;code&gt;&#39;effect&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For a great example of how Tweens work, have a look at this page: &lt;a href=&#34;http://easings.net&#34; target=&#34;_blank&#34;&gt;Easings.net&lt;/a&gt;.  &amp;ldquo;Easing&amp;rdquo; is another word that&amp;rsquo;s sometimes used in place of &amp;ldquo;tweening&amp;rdquo;.  Essentially, a tween is a way to change some value over time (from a start value to an end value) using a particular function. Hover over the different functions on this page to see how they work.&lt;/p&gt;

&lt;p&gt;When choosing a tween, you have two choices to make: 1) which function to use (examples: Sine or Bounce) and 2) which direction to apply that function (examples: In or In-Out).&lt;/p&gt;

&lt;h3 id=&#34;interpolating-properties&#34;&gt;Interpolating properties&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;Interpolation&amp;rdquo; means calculating the value(s) between two points.  In this case, we want to alter some of the properties of the gem&amp;rsquo;s &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt;&lt;code&gt;sprite&lt;/code&gt; node.  Specifically, the scale.  You can find Godot&amp;rsquo;s name for a node&amp;rsquo;s properties by hovering over the property name in the Inspector:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_08_01.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_08_01.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This tells us that we will be modifying the property &lt;code&gt;transform/scale&lt;/code&gt;.  We will use the tween&amp;rsquo;s &lt;code&gt;interpolate_property()&lt;/code&gt; function to define the animation:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Area2D&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;onready&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;effect&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;effect&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;onready&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sprite&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;sprite&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gem_grabbed&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;effect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interpolate_property&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sprite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;transform/scale&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sprite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Tween&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TRANS_QUAD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tween&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EASE_OUT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_on_gem_area_enter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;area&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;player&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;emit_signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;gem_grabbed&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;clear_shapes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;effect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_on_effect_tween_complete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;queue_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;interpolate_property()&lt;/code&gt; takes a number of arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;target object: the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt;&lt;code&gt;sprite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;target property: &lt;code&gt;transform/scale&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;starting value: the current value obtained from &lt;code&gt;get_scale()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ending value: we want to scale up to 2x&lt;/li&gt;
&lt;li&gt;duration (in s): 0.3s because we want a quick effect&lt;/li&gt;
&lt;li&gt;tween function: feel free to try other ones besides &lt;code&gt;TRANS_QUAD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;tween &amp;ldquo;ends&amp;rdquo;: you can also use other settings like &lt;code&gt;EASE_IN&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that the effect is set up, we use &lt;code&gt;start()&lt;/code&gt; to start it when the gem is touched.  However, we don&amp;rsquo;t want the gem to still be detecting collisions during the animation time, so we use &lt;code&gt;clear_shapes()&lt;/code&gt; to remove the collision detection.  Finally, we connect the tween&amp;rsquo;s &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_signal&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_signal&#34;&gt;&lt;/svg&gt;&lt;code&gt;tween_complete&lt;/code&gt; signal to actually delete the node.  Now our animation looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_08_02.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_08_02.gif&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is good, but we can do even better by interpolating &lt;em&gt;another&lt;/em&gt; property as well: the opacity.  Tweens get really powerful when you apply them to multiple properties at once.  Add this to the gem&amp;rsquo;s &lt;code&gt;_ready()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;effect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interpolate_property&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sprite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;visibility/opacity&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Tween&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TRANS_QUAD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tween&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EASE_OUT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now at the same time we&amp;rsquo;re scaling the sprite larger, we&amp;rsquo;re changing the opacity from 1 (fully visible) to 0 (fully transparent).  Now it looks even nicer:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_08_03.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_08_03.gif&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;timers&#34;&gt;Timers&lt;/h3&gt;

&lt;p&gt;Next we&amp;rsquo;re going to use the &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_timer&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_timer&#34;&gt;&lt;/svg&gt;Timer&lt;/a&gt; node to give our game a goal: collect as many gems as you can before the time runs out!&lt;/p&gt;

&lt;p&gt;Create a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_timer&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_timer&#34;&gt;&lt;/svg&gt;Timer&lt;/a&gt; node and call it &lt;code&gt;&#39;game_timer&#39;&lt;/code&gt;.  While you&amp;rsquo;re at it, add another &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_label.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_label&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_label&#34;&gt;&lt;/svg&gt;Label&lt;/a&gt; to the &lt;code&gt;HUD&lt;/code&gt; to display the countdown - call it &lt;code&gt;&#39;time_label&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_timer&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_timer&#34;&gt;&lt;/svg&gt;Timer&lt;/a&gt; node is also very simple, with only a few properties - set them as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_08_04.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_08_04.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Wait Time&lt;/code&gt;: how long the timer should run, in seconds&lt;/li&gt;
&lt;li&gt;&lt;code&gt;One Shot&lt;/code&gt;: if this is &lt;code&gt;false&lt;/code&gt;, the timer will restart every time it reaches zero&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Autostart&lt;/code&gt;: if this is &amp;lsquo;true&amp;rsquo;, the timer will start automatically when the node enters the tree&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the code we need to add to &lt;code&gt;main.gd&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onready&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time_label&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;HUD/time_label&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;onready&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;game_timer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;game_timer&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;time_label&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;game_timer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_time_left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_on_game_timer_timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;player&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Don&amp;rsquo;t forget to connect the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_signal&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_signal&#34;&gt;&lt;/svg&gt;&lt;code&gt;timeout&lt;/code&gt; signal.  Here, we&amp;rsquo;re just disabling the player when the time runs out.  You might want to also add a &amp;ldquo;Game Over&amp;rdquo; label, setting it to &lt;code&gt;hidden&lt;/code&gt; when the game starts, and then showing it at game end.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;These two nodes are incredibly useful for many, many situations.  You should try to use tweens whenever possible - they just make everything look better.  Also, note that you can create these nodes directly in code as an alternative to adding them to the scene tree:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tween&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tween&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;add_child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tween&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Feel free to use timers all over your projects as well. They can be used to measure durations, create regular repeating effects, and lots more.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-04-godot-101-09-godot-101-part-9-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/04/godot_101_09/&#34;&gt;Godot 101 - Part 9&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 7: Using Signals</title>
      <link>/blog/2017/03/godot_101_07/</link>
      <pubDate>Wed, 01 Mar 2017 05:22:12 -0700</pubDate>
      
      <guid>/blog/2017/03/godot_101_07/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 7 of &amp;ldquo;Godot 101&amp;rdquo;. In this installment, we&amp;rsquo;ll learn how properly communicate between nodes, using a Godot feature called a &lt;em&gt;signal&lt;/em&gt;.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/5WnumDQyJhg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h3 id=&#34;communicating-between-scenes&#34;&gt;Communicating between scenes&lt;/h3&gt;

&lt;p&gt;In the last part, we caused the gems to disappear when they are touched by the player.  Now, we want something to happen when the gems are collected - specifically, we want to increase the player&amp;rsquo;s score.  The problem we have is that &lt;code&gt;score&lt;/code&gt; is a variable in the &lt;code&gt;main&lt;/code&gt; scene&amp;rsquo;s script, but the gem collection happens on the gem&amp;rsquo;s script.  Put another way, we need a way for the gem&amp;rsquo;s script to change a variable on &lt;code&gt;main&lt;/code&gt;.  The tree looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_07_01.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_07_01.png&#34; width=&#34;250&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Each &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;gem&lt;/code&gt; is a child of &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_node&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_node&#34;&gt;&lt;/svg&gt;&lt;code&gt;gem_container&lt;/code&gt;, which is a child of &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_node&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_node&#34;&gt;&lt;/svg&gt;&lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;obvious-but-wrong&#34;&gt;Obvious, but wrong&lt;/h3&gt;

&lt;p&gt;Many beginners (and many beginner tutorials) will solve this problem in an obvious but incorrect manner.  They look at the tree image above and think, &amp;ldquo;main is 2 levels above the gem, so I just need to go 2 levels up the tree.&amp;rdquo;  The result is a solution like this to the &lt;code&gt;gem&lt;/code&gt; script:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_on_gem_area_enter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;player&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;queue_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;../..&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gem_grabbed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And on &lt;code&gt;main.gd&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gem_grabbed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, this &lt;em&gt;will&lt;/em&gt; work, and you will see the score being printed every time you grab a gem. However there are several problems with this approach.  First, it can ruin your ability to test a scene separately.  For example, we can run the gem scene by itself (remember how we did that with the player to test out movement?), but when we do, there is no node 2 levels above it!  If you have code that uses &lt;code&gt;get_node(&#39;../..&#39;)&lt;/code&gt;, it will report an error.&lt;/p&gt;

&lt;p&gt;This method is also very fragile.  Because the gem scene is now written specifically to work with the main scene as it is &lt;em&gt;now&lt;/em&gt;, if you ever change the structure of &lt;code&gt;main&lt;/code&gt;, your gem code will be broken.&lt;/p&gt;

&lt;h3 id=&#34;signaling-events&#34;&gt;Signaling events&lt;/h3&gt;

&lt;p&gt;The correct method to solve this problem in Godot is to use &lt;em&gt;signals&lt;/em&gt;.  We&amp;rsquo;ve already used one of the built-in signals that &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_area2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;Area2D&lt;/code&gt;&lt;/a&gt; provides to trigger an event.  Now, we want to define a &lt;em&gt;custom&lt;/em&gt; signal that we can use when the gem is collected.  This can be done with the &lt;code&gt;signal&lt;/code&gt; keyword:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Area2D&lt;/span&gt;

&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gem_grabbed&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_on_gem_area_enter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;area&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;player&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;n&#34;&gt;emit_signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;gem_grabbed&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;queue_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we&amp;rsquo;ve created a custom signal called &lt;code&gt;gem_grabbed&lt;/code&gt; and then when the player touches the gem, we use &lt;code&gt;emit_signal()&lt;/code&gt; to trigger it.&lt;/p&gt;

&lt;p&gt;Now, in &lt;code&gt;main.gd&lt;/code&gt; we just need to connect that signal to a function:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spawn_gems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;gem_container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;gem_grabbed&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;_on_gem_grabbed&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;

&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_on_gem_grabbed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As each gem instance is created, we connect its &lt;code&gt;gem_grabbed&lt;/code&gt; signal to a local function called &lt;code&gt;on_gem_grabbed()&lt;/code&gt; (following the &lt;code&gt;_on_*&lt;/code&gt; naming scheme that Godot uses by default). Any time that signal is emitted, the function will be called.&lt;/p&gt;

&lt;p&gt;Running the game now will result in exactly the same behavior as before, but by using Godot&amp;rsquo;s &lt;code&gt;signal&lt;/code&gt; functionality, we avoid the pitfalls of hard-coding the tree structure in our code.  If you ever find yourself typing &lt;code&gt;get_node(&#39;..&#39;)&lt;/code&gt; or &lt;code&gt;get_tree().get_root()&lt;/code&gt; you probably would be better off using a signal instead.&lt;/p&gt;

&lt;h3 id=&#34;displaying-information&#34;&gt;Displaying information&lt;/h3&gt;

&lt;p&gt;Finally, let&amp;rsquo;s display the score on the game screen, rather than printing it in the console log.  To start, we&amp;rsquo;re going to add to &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_node&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_node&#34;&gt;&lt;/svg&gt;&lt;code&gt;main&lt;/code&gt; a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_control.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_control&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_control&#34;&gt;&lt;/svg&gt;&lt;code&gt;Control&lt;/code&gt;&lt;/a&gt; node.  This is the base node type for all Godot&amp;rsquo;s various GUI nodes.  Name this node &lt;code&gt;HUD&lt;/code&gt; (&amp;ldquo;heads-up display&amp;rdquo;).  The &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_control&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_control&#34;&gt;&lt;/svg&gt;&lt;code&gt;HUD&lt;/code&gt; will contain all the nodes we want to have displaying information on the screen, as an overlay on top of the rest of the game.&lt;/p&gt;

&lt;p&gt;We want the &lt;code&gt;HUD&lt;/code&gt; to be the same size as our game window, so we will use the &lt;code&gt;anchor&lt;/code&gt; properties of the node (all &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_control.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_control&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_control&#34;&gt;&lt;/svg&gt;&lt;code&gt;Control&lt;/code&gt;&lt;/a&gt; nodes have these properties) and set them like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_07_02.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_07_02.png&#34; width=&#34;250&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These settings control where the margin of the node will be measured in relation to the parent node.  So if we set our margins like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_07_03.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_07_03.png&#34; width=&#34;250&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;HUD&lt;/code&gt;&amp;rsquo;s size will be exactly the same as the parent&amp;rsquo;s, even if the parent node changes. Click the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_lock&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_lock&#34;&gt;&lt;code&gt;Lock&lt;/code&gt;&lt;/svg&gt; button at the top to prevent accidentally clicking the node and moving it.&lt;/p&gt;

&lt;p&gt;Now to display the score, we will use a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_label.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_label&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_label&#34;&gt;&lt;/svg&gt;&lt;code&gt;Label&lt;/code&gt;&lt;/a&gt; and name it &lt;code&gt;score_label&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a simple node that displays text.  You can type directly into the &lt;code&gt;Text&lt;/code&gt; property and see it on the screen:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_07_04.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_07_04.png&#34; width=&#34;250&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We won&amp;rsquo;t be talking about formatting the text (fonts, styles, etc.) just yet, but if you want the text bigger, don&amp;rsquo;t resize the node (that will set the size of the node, not the text inside), you can use the &lt;code&gt;Scale&lt;/code&gt; property in the inspector.  Set it to something like &lt;code&gt;(2.5, 2.5)&lt;/code&gt;.  It won&amp;rsquo;t look great, but that&amp;rsquo;s ok for now.&lt;/p&gt;

&lt;p&gt;To have the score displayed, we just need to have our script update the &lt;code&gt;Text&lt;/code&gt; property whenever the score changes, so add this to &lt;code&gt;main.gd&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;n&#34;&gt;onready&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score_label&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;HUD/score_label&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_on_gem_grabbed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;	&lt;span class=&#34;n&#34;&gt;score_label&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can see our score change whever we grab a gem:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_07_05.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_07_05.gif&#34; width=&#34;350&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Signals are a very powerful feature in Godot, and something that is important to understand well.  Resist the temptation to use &lt;code&gt;get_node(&#39;..&#39;)&lt;/code&gt;, especially when using instanced scenes. It may be hard to grasp at first, but with practice you&amp;rsquo;ll find it&amp;rsquo;s a far more robust way of doing things.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-03-godot-101-08-godot-101-part-8-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/03/godot_101_08/&#34;&gt;Godot 101 - Part 8&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 6: Area-based Collisions</title>
      <link>/blog/2017/02/godot_101_06/</link>
      <pubDate>Thu, 23 Feb 2017 05:22:12 -0700</pubDate>
      
      <guid>/blog/2017/02/godot_101_06/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 6 of &amp;ldquo;Godot 101&amp;rdquo;. In this installment, we&amp;rsquo;ll learn how to detect when two collision areas overlap, so we can make our player run around and pick up gems.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/RZyiy9bbeNE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h3 id=&#34;gem-scene&#34;&gt;Gem Scene&lt;/h3&gt;

&lt;p&gt;First, let&amp;rsquo;s create a new scene for our gem objects.  The tree will look like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;gem&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;sprite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_collision_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_collision_shape_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;collision&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;ll use the gem image from the art folder, and a basic &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_rectangleshape2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_rectangle_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_rectangle_shape_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;RectangleShape2D&lt;/code&gt;&lt;/a&gt; for the collision.  Resize it to cover the sprite texture, and remember: &lt;em&gt;don&amp;rsquo;t scale the collision shape!&lt;/em&gt;  Use the handles to adjust the extents of your rectangle - see the previous lesson if you need help.&lt;/p&gt;

&lt;h3 id=&#34;main-scene&#34;&gt;Main Scene&lt;/h3&gt;

&lt;p&gt;Now we can start building our main scene.  The root will just be a plain &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_node.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_node&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_node&#34;&gt;&lt;/svg&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; named &amp;ldquo;main&amp;rdquo;. Click the &amp;ldquo;Instance&amp;rdquo; button: &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_instance&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_instance&#34;&gt;&lt;/svg&gt; and choose the player scene.&lt;/p&gt;

&lt;p&gt;We don&amp;rsquo;t want to have to add a bunch of gem instances manually, so we&amp;rsquo;re going to do it in code.  We&amp;rsquo;ll be spawning lots of gems, and we will want to keep track of how many are left, so let&amp;rsquo;s make a node to hold them all.  Add another &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_node.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_node&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_node&#34;&gt;&lt;/svg&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; as a child of &lt;code&gt;main&lt;/code&gt; and call it &lt;code&gt;gem_container&lt;/code&gt;.  Then add a script to the &lt;code&gt;main&lt;/code&gt; node with the following code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;onready&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;preload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;res://gem.tscn&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;onready&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gem_container&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;gem_container&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;randomize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_viewport&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_rect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;set_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;spawn_gems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spawn_gems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;gem_container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rand_range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
                          &lt;span class=&#34;n&#34;&gt;rand_range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this script, we use &lt;code&gt;preload&lt;/code&gt; to load the gem scene into memory so we can use it to create instances.  We also assign a variable to the &lt;code&gt;gem_container&lt;/code&gt; node so we can easily refer to it.  Our &lt;code&gt;spawn_gems&lt;/code&gt; function just takes a number and creates that many gem instances, assigning them as children of &lt;code&gt;gem_container&lt;/code&gt; and setting &lt;code&gt;pos&lt;/code&gt; to a random location.  Run the scene, and you should see this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_06_01.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_06_01.png&#34; width=&#34;350&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;area-collisions-using-signals&#34;&gt;Area collisions - using signals&lt;/h3&gt;

&lt;p&gt;We want to have the gem disappear (be picked up) when the player touches it.  Click on the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;gem&lt;/code&gt; node and then click &amp;ldquo;Node&amp;rdquo; in the Inspector:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_06_02.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_06_02.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a list of all the signals that an &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_area2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;Area2D&lt;/code&gt;&lt;/a&gt; node can produce.  The ones labeled &lt;code&gt;area_*&lt;/code&gt; are for detecting other area nodes, while the &lt;code&gt;body*&lt;/code&gt; ones are for detecting &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_physicsbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;PhysicsBody2D&lt;/code&gt;&lt;/a&gt; nodes.  The one we want to use is &lt;code&gt;area_enter&lt;/code&gt; which will return the area that entered - in our case the player.&lt;/p&gt;

&lt;p&gt;Click on the &lt;code&gt;area_enter&lt;/code&gt; signal and click the &amp;ldquo;Connect&amp;rdquo; button.  You will then see the following dialog:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_06_03.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_06_03.png&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;This lets us set what node we want the signal to be sent to.  &lt;code&gt;gem&lt;/code&gt; is highlighted in red because it&amp;rsquo;s the current node.  That&amp;rsquo;s fine, and at the bottom we&amp;rsquo;ll leave the &amp;ldquo;Method in Node&amp;rdquo; name as it is.  Godot will now create that function for us.  To start, let&amp;rsquo;s fill it out like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_on_gem_area_enter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now when you move the player over a gem, you will see &amp;ldquo;player&amp;rdquo; printed in the output window.  However, if you run it a couple of times, you might see something like this as well:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@gem@4
@gem@7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What&amp;rsquo;s happening here?  Well, this signal is generated when &lt;em&gt;any&lt;/em&gt; area enters the gem&amp;rsquo;s area.  This includes other gems!  If we just deleted a gem when this signal happens, then two touching gems would delete each other, and we don&amp;rsquo;t want that.  So we&amp;rsquo;re going to make sure and check the name of the entering area:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_on_gem_area_enter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;player&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;queue_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;spawning-more-gems&#34;&gt;Spawning more gems&lt;/h3&gt;

&lt;p&gt;Back in our &lt;code&gt;main&lt;/code&gt; scene, we want to detect when the player has collected all the gems, so we can spawn more.  We do that by looking at the &lt;code&gt;gem_container&lt;/code&gt; and counting its children:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;level&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gem_container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_child_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;level&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;spawn_gems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;level&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We add a variable called &lt;code&gt;level&lt;/code&gt; and whenever the &lt;code&gt;gem_container&lt;/code&gt; is empty, we increment it and spawn more gems.  Collect away!&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;The next step will be to increment the player&amp;rsquo;s score when they collect a gem.  However, there&amp;rsquo;s a catch:  the code that detects collision and deletes the gem is running on the gem node, while the code that holds the score (and will display it) is on the &lt;code&gt;main&lt;/code&gt; node.  So we need a way to have an instanced node communicate with another node that is farther up the tree.  This is a common occurrence, but is often done incorrectly by beginners.  In the next lesson, we&amp;rsquo;ll look at the &lt;em&gt;wrong&lt;/em&gt; (but obvious) way to do this, and then show how to do it properly.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-03-godot-101-07-godot-101-part-7-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/03/godot_101_07/&#34;&gt;Godot 101 - Part 7&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 5: Player-controlled Sprite</title>
      <link>/blog/2017/02/godot_101_05/</link>
      <pubDate>Sun, 19 Feb 2017 05:22:12 -0700</pubDate>
      
      <guid>/blog/2017/02/godot_101_05/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 5 of &amp;ldquo;Godot 101&amp;rdquo;. In this installment, we&amp;rsquo;ll learn how to use player input to move a sprite around the screen.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/FgtekgMca2E&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;player-scene&#34;&gt;Player Scene&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/art.zip&#34;&gt;Click here&lt;/a&gt; to download a zip of the art we&amp;rsquo;re going to use for this lesson. Unpack it in your project folder.&lt;/p&gt;

&lt;p&gt;First let&amp;rsquo;s create a scene for our player.  What node should we choose for our root node?  It depends on what kind of collisions and physics we need.  If you click on &lt;code&gt;Add Node&lt;/code&gt; and search for &amp;ldquo;collision&amp;rdquo; you will see there is a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_collisionobject2d.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;CollisionObject2D&lt;/code&gt;&lt;/a&gt; that has a few children:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_collisionobject2d.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;CollisionObject2D&lt;/code&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_area2d.html&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34; target=&#34;_blank&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;Area2D&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_physicsbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;PhysicsBody2D&lt;/code&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_staticbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_static_body_2d&#34;&gt;
&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_static_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;StaticBody2D&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_rigidbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_rigid_body_2d&#34;&gt;
&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_rigid_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;RigidBody2D&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_kinematicbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_kinematic_body_2d&#34;&gt;
&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_kinematic_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;KinematicBody2D&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These nodes are all for implementing different kinds of collision and physics in your game - which one you choose depends on your goal.  A brief summary:&lt;/p&gt;

&lt;h5 id=&#34;a-href-http-docs-godotengine-org-en-stable-classes-class-area2d-html-svg-width-18-height-18-class-icon-icon-area-2d-target-blank-use-xlink-href-blog-img-symbol-defs-svg-icon-icon-area-2d-svg-area2d-a&#34;&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_area2d.html&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34; target=&#34;_blank&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;Area2D&lt;/code&gt;&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;This node is a general purpose area detection node.  It can detect when another object enters or leaves its area but doesn&amp;rsquo;t have any physics properties.  This is great for when you simply need to know when one object overlaps another.&lt;/p&gt;

&lt;h5 id=&#34;a-href-http-docs-godotengine-org-en-stable-classes-class-kinematicbody2d-html-target-blank-svg-width-18-height-18-class-icon-icon-kinematic-body-2d-use-xlink-href-blog-img-symbol-defs-svg-icon-icon-kinematic-body-2d-svg-kinematicbody2d-a&#34;&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_kinematicbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_kinematic_body_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_kinematic_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;KinematicBody2D&lt;/code&gt;&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;This node is for what is sometimes called &amp;ldquo;arcade physics&amp;rdquo; (hence the little &lt;em&gt;Space Invaders&lt;/em&gt; icon).  It is not affected by physics (gravity, etc.) but will collide with other bodies.  This is good for player controlled bodies that need collision - for example, a platform character that doesn&amp;rsquo;t fall through the ground.&lt;/p&gt;

&lt;h5 id=&#34;a-href-http-docs-godotengine-org-en-stable-classes-class-rigidbody2d-html-target-blank-svg-width-18-height-18-class-icon-icon-rigid-body-2d-use-xlink-href-blog-img-symbol-defs-svg-icon-icon-rigid-body-2d-svg-rigidbody2d-a&#34;&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_rigidbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_rigid_body_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_rigid_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;RigidBody2D&lt;/code&gt;&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;This is the node to use for full-on physics simulation.  Objects of this type will behave realistically when interacting with the environment.  You would use this, for example, if you were making an &lt;em&gt;Angry Birds&lt;/em&gt; style game and wanted stacks of blocks that would tumble down when hit.&lt;/p&gt;

&lt;h5 id=&#34;a-href-http-docs-godotengine-org-en-stable-classes-class-staticbody2d-html-svg-width-18-height-18-class-icon-icon-static-body-2d-use-xlink-href-blog-img-symbol-defs-svg-icon-icon-static-body-2d-svg-staticbody2d-a&#34;&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_staticbody2d.html&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_static_body_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_static_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;StaticBody2D&lt;/code&gt;&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;This is a &lt;em&gt;static&lt;/em&gt; physics body, meaning it is designed to represent non-moving objects like walls, trees, etc. - anything that will not be moving around.&lt;/p&gt;

&lt;p&gt;For this particular project, we&amp;rsquo;re going to stick with the &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_area2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;Area2D&lt;/code&gt;&lt;/a&gt; for our player.  Add one to the scene and name it &amp;ldquo;player&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;By itself, collision nodes are not visible, so we need to add a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_sprite.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt;&lt;code&gt;Sprite&lt;/code&gt;&lt;/a&gt; to display our character&amp;rsquo;s image.  In the &amp;ldquo;art/Player&amp;rdquo; folder are the images for our character.  Drag the standing image into the node&amp;rsquo;s &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_texture&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_texture&#34;&gt;&lt;/svg&gt;&lt;code&gt;Texture&lt;/code&gt; field:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_05_01.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_05_01.gif&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s scale the sprite down a little and make sure it&amp;rsquo;s centered on the parent node by setting the following values in the Inspector:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;Scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;collision-shapes&#34;&gt;Collision Shapes&lt;/h3&gt;

&lt;p&gt;If we stopped here, we wouldn&amp;rsquo;t actually have any collision detetion, because any &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_collisionobject2d.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;CollisionObject2D&lt;/code&gt;&lt;/a&gt; must have a collision shape defined.  We&amp;rsquo;re going to use a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_collisionshape2D.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_collision_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_collision_shape_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;CollisionShape2D&lt;/code&gt;&lt;/a&gt;.  Add it as a child of &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;player&lt;/code&gt; and select a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_rectangleshape2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_rectangle_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_rectangle_shape_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;RectangleShape2D&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_05_02.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_05_02.gif&#34; width=&#34;150&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Now we need to adjust our collision shape to define the collision area.  &lt;em&gt;Important:&lt;/em&gt; do &lt;em&gt;not&lt;/em&gt; drag the scale handles.  Scaling a physics object will not work and may break things.  Use the inner handles to adjust the extents of the rectangle:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_05_03.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_05_03.gif&#34; width=&#34;100&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;h3 id=&#34;input-mapping&#34;&gt;Input Mapping&lt;/h3&gt;

&lt;p&gt;We are going to use the arrow keys to move our player. In Godot, all the player input functions are described under &lt;code&gt;Scene -&amp;gt; Project Settings -&amp;gt; Input Map&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_05_04.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_05_04.png&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;In this window, you can set up whatever input actions you want to use, and assign various controls to them - keys, mouse buttons, game pads, etc.  For this demo, we&amp;rsquo;re going to stick with the already-defined actions for the four arrow keys: &lt;code&gt;&amp;quot;ui_up&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;ui_left&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;ui_right&amp;quot;&lt;/code&gt;, and &lt;code&gt;&amp;quot;ui_down&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;player-script&#34;&gt;Player Script&lt;/h3&gt;

&lt;p&gt;Now, let&amp;rsquo;s add a script to the player node:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Area2D&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First, we&amp;rsquo;re creating a variable to set our player&amp;rsquo;s speed.  The &lt;code&gt;export&lt;/code&gt; keyword does something special: save this script, then click on the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;player&lt;/code&gt; node and look at the Inspector.  Now we can change the value of &lt;code&gt;speed&lt;/code&gt; directly in the Inspector!&lt;/p&gt;

&lt;p&gt;The movement is going to be similar to how we did it in the previous lesson - we move the position by adding &lt;code&gt;vel * delta&lt;/code&gt;.  But our sprite won&amp;rsquo;t move, because we need to detect the keys:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;ui_right&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;ui_left&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;ui_down&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;ui_up&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we&amp;rsquo;re creating an &lt;code&gt;input&lt;/code&gt; vector to hold the direction the player is holding - a combination of whatever keys are pressed.  &lt;code&gt;Input.is_action_pressed()&lt;/code&gt; will return &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt;, so we can get the total movement in each axis by subtracting the negative direction key from the positive one.&lt;/p&gt;

&lt;p&gt;Once we have the input vector, we must &lt;code&gt;normalize()&lt;/code&gt; it so that &lt;code&gt;(1, 1)&lt;/code&gt; is not faster than &lt;code&gt;(1, 0)&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Area2D&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;

&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;set_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_viewport_rect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;collision&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_extents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;ui_right&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;ui_left&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;ui_down&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;ui_up&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;wrapping-around&#34;&gt;Wrapping Around&lt;/h3&gt;

&lt;p&gt;Finally, we&amp;rsquo;ve copied-and-pasted from the last lesson the &lt;code&gt;_ready()&lt;/code&gt; code to grab the sizes of the screen and collision shape.  Then we&amp;rsquo;re using those to limit the movement of the sprite to a minimum and maximum value (this is what &lt;code&gt;clamp()&lt;/code&gt; does).&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;That will do it for our player&amp;rsquo;s movement.  In the next part, we&amp;rsquo;ll put some items on the screen for our player to collect and explore how to detect collisions with an &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_area2d.html&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34; target=&#34;_blank&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;Area2D&lt;/code&gt;&lt;/a&gt; node.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-02-godot-101-06-godot-101-part-6-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/02/godot_101_06/&#34;&gt;Godot 101 - Part 6&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 4: Instancing Scenes</title>
      <link>/blog/2017/02/godot_101_04/</link>
      <pubDate>Wed, 15 Feb 2017 05:22:12 -0700</pubDate>
      
      <guid>/blog/2017/02/godot_101_04/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 4 of &amp;ldquo;Godot 101&amp;rdquo;, taking our bouncing sprite and showing how to quickly create multiple instances of it.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/0WOqJy3lot4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;instancing&#34;&gt;Instancing&lt;/h2&gt;

&lt;p&gt;Now that we have a nice animated sprite bouncing around the screen, the natural next question is &amp;ldquo;how do I make a bunch of them?&amp;rdquo;  If we want, say, 10 sprites bouncing around, we don&amp;rsquo;t want to have to make 10 separate scenes for them.&lt;/p&gt;

&lt;p&gt;Your first thought might be to duplicate the sprite node by right-clicking on it and choosing &amp;ldquo;Duplicate&amp;rdquo;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_04_01.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_04_01.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;However, this won&amp;rsquo;t work - you get an error message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot101_04_02.png&#34; width=&#34;300&#34;&gt;&lt;/p&gt;

&lt;p&gt;Each scene tree has a root node - the first node you create - and can only have &lt;em&gt;one&lt;/em&gt; root node.  We could make another sprite as a &lt;em&gt;child&lt;/em&gt; of the first one, but that wouldn&amp;rsquo;t give use what we need - a child node is attached to its parent, inheriting its position, etc.  We need to create multiple independent versions of the original sprite.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll start by making a new scene (click on &lt;code&gt;Scene&lt;/code&gt; -&amp;gt; &amp;lsquo;New Scene&amp;rsquo;) and add a node to it.  We&amp;rsquo;re going to use the simplest node available: &lt;svg width=&#34;24&#34; height=&#34;24&#34; class=&#34;icon-icon_node&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_node&#34;&gt;&lt;/svg&gt;&lt;code&gt;Node&lt;/code&gt;.  This is a generic node, with no properties of its own.  This will be our main scene&amp;rsquo;s root node, so let&amp;rsquo;s rename it &amp;ldquo;main&amp;rdquo; by clicking on its name and then save it as &amp;ldquo;main.tscn&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Now click the &amp;ldquo;Play&amp;rdquo; button at the top and you&amp;rsquo;ll see this message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot101_04_03.png&#34; width=&#34;400&#34;&gt;&lt;/p&gt;

&lt;p&gt;We need to define what scene will be the one that is launched when the project starts.  Click &amp;ldquo;Select&amp;rdquo; and choose our new main.tscn. Now let&amp;rsquo;s add a script to the main node.  This will be our code to instance a sprite:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;onready&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sprite&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;preload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;res://Sprite.tscn&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sprite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;add_child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That first line uses the &lt;code&gt;preload&lt;/code&gt; function to load the sprite scene into memory at compile time, so that it&amp;rsquo;s ready to use.  The &lt;code&gt;onready&lt;/code&gt; statement ensures that the object is loaded in time for the &lt;code&gt;_ready()&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A note on resource paths&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;Notice how we indicated where to load the sprite scene from: &amp;ldquo;res://Sprite.tscn&amp;rdquo;  All resources in your project will be under a &amp;ldquo;res://&amp;rdquo; path (&amp;ldquo;res&amp;rdquo; is short for resource).  If we were building a complex project with a large number of files, we might choose to put all our scenes into their own folder to help keep things organized.  In this case, the resource path might look like this: &amp;ldquo;res://scenes/Sprite.tscn&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Now hit &amp;ldquo;Play&amp;rdquo;, and you will see a sprite bouncing around the screen.  To see what&amp;rsquo;s going on, click the debugger and you can inspect the live scene tree:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_04_04.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_04_04.gif&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;The Remote Inspector tab is very useful to see what&amp;rsquo;s going on in the game - what scene is active, what nodes are active, and what properties they all have.  For example, observe what changes is we add a loop to spawn more sprites:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sprite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;add_child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s that easy to create instances of scenes you&amp;rsquo;ve created.  In the future, this is how we&amp;rsquo;ll do things like spawning mobs or bullets - just by instancing them as needed and adding them to the current scene tree.  In the next lesson we&amp;rsquo;ll start looking at some other nodes and how they&amp;rsquo;re used.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-02-godot-101-05-godot-101-part-5-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/02/godot_101_05/&#34;&gt;Godot 101 - Part 5&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 3: Scripting (continued)</title>
      <link>/blog/2017/02/godot_101_03/</link>
      <pubDate>Mon, 13 Feb 2017 05:22:12 -0700</pubDate>
      
      <guid>/blog/2017/02/godot_101_03/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 3 of &amp;ldquo;Godot 101&amp;rdquo;, where we&amp;rsquo;ll finish scripting our bouncing animated sprite.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wkDiwOAqfuI&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;scripting-continued&#34;&gt;Scripting (continued)&lt;/h2&gt;

&lt;p&gt;In the last lesson, we created a script to move our &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;Sprite&lt;/code&gt;, but it goes off the edge of the screen, and we want to change that.  We&amp;rsquo;re going to do it in a simple way first, then modify it to be more robust.&lt;/p&gt;

&lt;p&gt;First, we need to know how big our screen is.  Screen size is set in the Project Settings (click Scene -&amp;gt; Project Settings), but we need our script to use those values:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sprite&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_viewport_rect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_rot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_rot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PI&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;get_viewport_rect()&lt;/code&gt; gives us the screensize (you can look it up in the help if you want to see the details - or click &lt;a target=&#34;_blank&#34; href=&#34;http://docs.godotengine.org/en/stable/classes/class_canvasitem.html?highlight=get_viewport_rect&#34;&gt;here&lt;/a&gt; to see the docs).&lt;/p&gt;

&lt;p&gt;Then we use a new variable, &lt;code&gt;pos&lt;/code&gt;, to keep track of our position. If its &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; goes out of bounds, we reverse the velocity in that axis.  Now we stay on the screen, but we still have a problem:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_03_01.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_03_01.gif&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;The sprite doesn&amp;rsquo;t bounce until it goes halfway off the screen.  That&amp;rsquo;s because the &lt;code&gt;Pos&lt;/code&gt; property is the center of the sprite (there&amp;rsquo;s a checkbox marked &lt;code&gt;Centered&lt;/code&gt; that will change it to the upper left).  That means we need to calculate half the width &amp;amp; height of the sprite to have it bounce properly.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sprite&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;150&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_viewport_rect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_texture&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_rot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_rot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PI&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We&amp;rsquo;re handling this with a new variable called &lt;code&gt;extents&lt;/code&gt; which we fill using &lt;code&gt;get_texture()&lt;/code&gt; - we also divide it by 2 because we only care about half of the width/height.&lt;/p&gt;

&lt;p&gt;Next, we have to update our bouncing tests to add/subtract the extents to the wall positions, and now we&amp;rsquo;re bouncing correctly.&lt;/p&gt;

&lt;h2 id=&#34;randomizing&#34;&gt;Randomizing&lt;/h2&gt;

&lt;p&gt;As a last step, we&amp;rsquo;re going to randomize the velocity and spin using the &lt;code&gt;rand_range()&lt;/code&gt; function:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sprite&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spin&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;	&lt;span class=&#34;n&#34;&gt;randomize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_viewport_rect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_texture&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;	&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rand_range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rotated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rand_range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;	&lt;span class=&#34;n&#34;&gt;spin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rand_range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;set_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;hll&#34;&gt;	&lt;span class=&#34;n&#34;&gt;set_rot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_rot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;One important thing to keep in mind when using randomized commands:  by default, Godot will produce the same sequence of &amp;ldquo;random&amp;rdquo; numbers every time you run the game unless you first use &lt;code&gt;randomize()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;That completes our bouncing sprite.  In the next lesson, we&amp;rsquo;ll explore how to use this Sprite scene to add to a larger scene and allow us to spawn multiple sprites.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-02-godot-101-04-godot-101-part-4-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/02/godot_101_04/&#34;&gt;Godot 101 - Part 4&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 2: Scripting</title>
      <link>/blog/2017/02/godot_101_02/</link>
      <pubDate>Sat, 11 Feb 2017 05:22:12 -0700</pubDate>
      
      <guid>/blog/2017/02/godot_101_02/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 2 of &amp;ldquo;Godot 101&amp;rdquo;, where we&amp;rsquo;ll introduce Godot&amp;rsquo;s scripting language, GDScript.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/hi2yiY-zNxQ&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;scripting&#34;&gt;Scripting&lt;/h2&gt;

&lt;p&gt;In the last part, we created our &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;Sprite&lt;/code&gt; node and set its texture.  However, if you look in the Inspector tab, you&amp;rsquo;ll see there are lots of properties that you can set for a &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;Sprite&lt;/code&gt; node:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_02_01.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_02_01.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;For example, if you pick up the sprite and move it around, you&amp;rsquo;ll see the &lt;code&gt;Pos&lt;/code&gt; property change.  You can also click on the property and type in the coordinates you want.  To write a script that will move the sprite around, this is the property we want to control.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s add a script.  Right-click on the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;Sprite&lt;/code&gt; in the scene tab, and choose &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_script&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_script&#34;&gt;&lt;/svg&gt;&lt;code&gt;Add Script&lt;/code&gt;.  You&amp;rsquo;ll see the following window:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_02_02.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_02_02.png&#34; width=&#34;350&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We don&amp;rsquo;t need to change anything here, but I&amp;rsquo;ll just point out a couple of things.  First, the &lt;code&gt;Inherits&lt;/code&gt; box lists &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;Sprite&lt;/code&gt; - if you&amp;rsquo;re familiar with Object-Oriented Programming (OOP), you&amp;rsquo;ll recognize this means our script is going to &lt;em&gt;extend&lt;/em&gt; the Sprite class.  We&amp;rsquo;ll have all the properties and functionality of a Godot Sprite, plus whatever we add ourselves.  The file will be named &amp;ldquo;Sprite.gd&amp;rdquo;, which is fine.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sprite&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# class member variables go here, for example:&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# var a = 2&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# var b = &amp;quot;textvar&amp;quot;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# Called every time the node is added to the scene.&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# Initialization here&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the default script, and it has some helpful comments to get you started. Go ahead and delete the comments (lines starting with &lt;code&gt;#&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve used Python, GDScript will look very familar. &lt;code&gt;func _ready()&lt;/code&gt; indicates a &lt;em&gt;function&lt;/em&gt;.  This &lt;code&gt;_ready()&lt;/code&gt; function will be called every time the node is created and added to the scene (like when we click &amp;ldquo;Play Scene&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;To show how this works, try adding the following line to the &lt;code&gt;_ready()&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you play the scene, you will see the sprite&amp;rsquo;s coordinates (the same ones in the &lt;code&gt;Pos&lt;/code&gt; property of the Inspector) appear in the &amp;ldquo;Output&amp;rdquo; tab of the Godot window. But how do we know what methods we can use on a &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;Sprite&lt;/code&gt; node?  Let&amp;rsquo;s use the built-in reference documentation:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_02_03.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_02_03.gif&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Here we can see all the methods a &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;Sprite&lt;/code&gt; node has.  But &lt;code&gt;get_pos()&lt;/code&gt; isn&amp;rsquo;t there!  That&amp;rsquo;s because if you look at the Inspector again, &lt;code&gt;Pos&lt;/code&gt; is a property of &lt;code&gt;Node2D&lt;/code&gt;, which &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;Sprite&lt;/code&gt; inherits from.  Click &lt;code&gt;Node2D&lt;/code&gt; and you&amp;rsquo;ll see the &lt;code&gt;get_pos()&lt;/code&gt; method description, which tells us it returns a &lt;code&gt;Vector2&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;To move the sprite, we need to change the value of &lt;code&gt;Pos&lt;/code&gt; over time.  Just like any other game engine, Godot is running a loop at a certain speed (typically 60 frames per second), and we just want to move the sprite a little bit each frame.  Here&amp;rsquo;s our updated code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sprite&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First, we declare a variable called &lt;code&gt;vel&lt;/code&gt; and set it to &lt;code&gt;Vector2(1, 1)&lt;/code&gt; - we will move our sprite 1 pixel each to the right and down.&lt;/p&gt;

&lt;p&gt;Next, we have to call the &lt;code&gt;set_process&lt;/code&gt; function and set it to &lt;code&gt;true&lt;/code&gt;.  This tells Godot that this object wants to do something every frame.  What it will do is whatever code we put in the &lt;code&gt;_process()&lt;/code&gt; function.  Now when we run, we&amp;rsquo;ll see this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_02_04.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_02_04.gif&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;This is fine, but we can do better.  One of the things we need to take into account is that the game loop may not always run at exactly 60 fps.  That means that if we move the same distance every frame, our movement may not be smooth.  In other words, instead of our velocity being in units of pixels/frame we want the units to be pixels/second.  We can accomplish this using the &lt;code&gt;delta&lt;/code&gt; parameter, which measures exactly how long it&amp;rsquo;s been since the previous frame:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sprite&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s the basics of scripting. We added a script to our &lt;code&gt;Sprite&lt;/code&gt; node to make it do something every frame.  For fun, try making the sprite rotate by adding this to the &lt;code&gt;_process&lt;/code&gt; function:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;set_rot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_rot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PI&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Feel free to try changing other properties of the node and see what happens.&lt;/p&gt;

&lt;p&gt;In the next lesson, we&amp;rsquo;ll finish our script by making sure the sprite stays on the screen by bouncing off the edges.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-02-godot-101-03-godot-101-part-3-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/02/godot_101_03/&#34;&gt;Godot 101 - Part 3&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 1: Introduction to Godot</title>
      <link>/blog/2017/02/godot_101_01/</link>
      <pubDate>Wed, 08 Feb 2017 05:22:12 -0700</pubDate>
      
      <guid>/blog/2017/02/godot_101_01/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 1 of &amp;ldquo;Godot 101&amp;rdquo;, where we&amp;rsquo;ll give an overview of what a game engine is in general, and what Godot is in specific.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/gHA4M2cqWb0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;game-engine&#34;&gt;Game Engine?&lt;/h2&gt;

&lt;p&gt;A game engine is sort of an all-in-one software package for making video games.  The purpose of most game engines is to make development easier by taking care of all the low level details, leaving the developer free to focus on making the actual game.  By &amp;ldquo;low level details&amp;rdquo;, we mean things like &lt;em&gt;rendering&lt;/em&gt; (producing the graphics), animation, collisions and physics, networking, etc.  In other words, the things you &lt;em&gt;need&lt;/em&gt; to make your game, but aren&amp;rsquo;t the actual game itself.&lt;/p&gt;

&lt;h2 id=&#34;why-godot&#34;&gt;Why Godot?&lt;/h2&gt;

&lt;p&gt;Most of you reading this have probably heard of &lt;a href=&#34;http://unity3d0.com&#34;&gt;Unity&lt;/a&gt;, which is the 500 lb gorilla of the game industry.  Many companies, large and small, use Unity - you&amp;rsquo;ve probably played games made with Unity, whether you realized it or not.&lt;/p&gt;

&lt;p&gt;Even though it&amp;rsquo;s popular, Unity has some drawbacks, especially for beginners. For example, Unity is designed for 3D and while it supports 2D, that support is not very good, and is not easy to deal with. We have often said that beginners should start with 2D games, because working in 3D adds yet another layer of complexity.  Once you have a strong handle on the 2D fundamentals, it will be much easier to make the step up to 3D.&lt;/p&gt;

&lt;p&gt;Godot, on the other hand, is very good at both 2D and 3D, making it a much better learning platform.  In addition, while Unity is technically free, it is commercial software, and you are required to pay for a license if your game makes a certain amount of money.  One of Godot&amp;rsquo;s big advantages is that it is 100% free.  It is open source (MIT License), which means that you will never pay anything for it, no matter what.&lt;/p&gt;

&lt;p&gt;On top of all that, Godot supports all the most popular platforms for games - PC, mobile, and even consoles!&lt;/p&gt;

&lt;p&gt;Finally, Godot&amp;rsquo;s scripting language (GDScript) is very similar to Python (it was based on it).  We think &lt;a href=&#34;/blog/blog/2015/09/whypython/&#34;&gt;Python is a great choice for beginners&lt;/a&gt;, so if you&amp;rsquo;ve been studying Python, Godot will be a smooth transition for you.&lt;/p&gt;

&lt;p&gt;For these reasons, we&amp;rsquo;re big fans of Godot for learning game development.&lt;/p&gt;

&lt;p&gt;Now, let&amp;rsquo;s look at some concepts:&lt;/p&gt;

&lt;h2 id=&#34;nodes-and-scenes&#34;&gt;Nodes and Scenes&lt;/h2&gt;

&lt;p&gt;In Godot, everything is a &lt;code&gt;Node&lt;/code&gt;.  A node can represent a sprite, an animation, a sound, or just about anything else in your project.  Every node has a few things in common:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name - each node can be referred to by name&lt;/li&gt;
&lt;li&gt;Properties - every node has a whole set of properties that define how it looks, acts, etc.&lt;/li&gt;
&lt;li&gt;Callback - each has a callback function that can be set to process during every frame&lt;/li&gt;
&lt;li&gt;Extendable - with code, any node can be extended to have additional properties and functionality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another very important characteristic of Nodes is they can be assigned to other nodes as children, creating a &lt;em&gt;tree&lt;/em&gt; structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot101_01_1.png&#34; width=&#34;250&#34;&gt;&lt;/p&gt;

&lt;p&gt;In a tree, every node can have one (and only one) &lt;code&gt;parent&lt;/code&gt; and any number of &lt;code&gt;children&lt;/code&gt;.  A node can inherit behavior and properties from its parent, allowing you to organize them in a logical manner.&lt;/p&gt;

&lt;p&gt;A group of nodes arranged in a tree is called a &lt;code&gt;Scene&lt;/code&gt;.  In Godot, scenes can be saved/loaded, duplicated, and can even spawn other scenes.  Running a game means running a scene.  All of your work in the Godot editor will be setting up and organizing scenes.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-godot-project&#34;&gt;Creating a Godot project&lt;/h2&gt;

&lt;p&gt;You can download Godot here: &lt;a href=&#34;http://godotengine.org/&#34;&gt;http://godotengine.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you first open Godot, you will see the &amp;ldquo;Project Manager&amp;rdquo; window:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_01_2.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_01_2.png&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;In this window you can see a list of the Godot projects you may be working on. To start a new project, click &amp;ldquo;New Project&amp;rdquo;. Every project in Godot starts with a folder, so we need to create one - just pick a location that&amp;rsquo;s convenient for you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_01_3.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_01_3.gif&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Now just click &amp;ldquo;Edit&amp;rdquo; to open the project.&lt;/p&gt;

&lt;h2 id=&#34;a-simple-scene&#34;&gt;A simple scene&lt;/h2&gt;

&lt;p&gt;This is the main Godot editor window you will see when you open a new project:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_01_4.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_01_4.png&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;The center of the window is your view of the game.  Using the buttons at the top marked &amp;ldquo;2D&amp;rdquo; and &amp;ldquo;3D&amp;rdquo;, you can change the mode. Let&amp;rsquo;s stick with &amp;ldquo;2D&amp;rdquo; for this one.&lt;/p&gt;

&lt;p&gt;On the right side is a window labeled &amp;ldquo;Scene&amp;rdquo;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_01_5.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_01_5.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;This is where we&amp;rsquo;ll build our &lt;code&gt;Scene&lt;/code&gt; (tree of nodes).  We can add a node by clicking the + button.  Now we can see a (long!) list of different node types to choose from.  This can be very overwhelming, but don&amp;rsquo;t worry - for most projects you may not ever use the majority of these nodes.  They are there for you if you need them.  The nodes are sorted into a hierarchy - green for UI nodes, blue for 2D nodes, and red for 3D nodes (plus some miscellaneous white and yellow ones).&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re going to type &amp;ldquo;sprite&amp;rdquo; in the search box to narrow the list down to the node we&amp;rsquo;re looking for (&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;Sprite&lt;/code&gt;) and click &amp;ldquo;Create&amp;rdquo;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_01_6.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_01_6.gif&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Now we have a sprite in our scene, but it&amp;rsquo;s up in the corner and it doesn&amp;rsquo;t look very impressive.  You can control your view with the mouse: middle-click-and-drag will pan your view around, and the scroll wheel will control zoom.&lt;/p&gt;

&lt;p&gt;To be able to see our sprite, we need to add a &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_texture&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_texture&#34;&gt;&lt;/svg&gt; &lt;code&gt;Texture&lt;/code&gt; to it.  We&amp;rsquo;re going to use the Godot icon that&amp;rsquo;s included with every new project.  Now, let&amp;rsquo;s look at the &amp;ldquo;Inspector&amp;rdquo; tab in the lower-right:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_01_7.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_01_7.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Every time you click on a node in your scene, the Inspector will show all of that node&amp;rsquo;s properties - and there are a lot of them!  The one we care about is the first one, &amp;ldquo;Texture&amp;rdquo;, which is currently showing &amp;ldquo;&lt;null&gt;&amp;rdquo;.  To set it, just drag the Godot icon image on top of the spot where you see &amp;ldquo;&lt;null&gt;&amp;rdquo;.  Our sprite has an image!  Pick it up and drag it to the center of the screen.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_01_8.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_01_8.png&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s our first simple scene!  To finish up, let&amp;rsquo;s save and run it.  To do that, click on the &amp;ldquo;Play the edited scene&amp;rdquo; button.  You will be asked to save your scene, and then click the button again:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_01_9.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_01_9.gif&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it - your first Godot scene!  In later lessons, we&amp;rsquo;ll explore more nodes, begin writing code, and more.  If you have any questions, please post them below.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-02-godot-101-02-godot-101-part-2-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/02/godot_101_02/&#34;&gt;Godot 101 - Part 2&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
