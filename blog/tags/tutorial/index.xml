<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Tutorial on KCC Blog </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>/blog/tags/tutorial/</link>
    <language>en-us</language>
    
    <copyright>KidsCanCode LLC</copyright>
    <updated>Fri, 29 Dec 2017 08:12:12 -0700</updated>
    
    <item>
      <title>Godot 3.0: Rigid Bodies</title>
      <link>/blog/2017/12/godot3_kyn_rigidbody1/</link>
      <pubDate>Fri, 29 Dec 2017 08:12:12 -0700</pubDate>
      
      <guid>/blog/2017/12/godot3_kyn_rigidbody1/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;At the time of this writing, Godot 3.0 is nearing release, and many new users are
trying it out. Recently I&amp;rsquo;ve seen a lot of confusion around physics and physics
bodies, especially rigid bodies, which are Godot&amp;rsquo;s &amp;ldquo;true&amp;rdquo; physics nodes.&lt;/p&gt;

&lt;p&gt;In this tutorial, I&amp;rsquo;ll explain when (and when not) to use rigid bodies, how they
work, and demonstrate a few handy tricks to bend them to your will. The
examples will use RigidBody2D, but the lessons apply equally to 3D.&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/xsAyx2r1bQU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_rigidbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_rigid_body_2d&#34;&gt;
&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_rigid_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;RigidBody2D&lt;/code&gt;&lt;/a&gt;
is the physics body in Godot that provides simulated physics. This means that you
don&amp;rsquo;t control a RigidBody2D directly. Instead you apply forces to it (gravity, impulses,
etc.) and Godot&amp;rsquo;s built-in physics engine calculates the resulting movement, including
collisions, bouncing, rotating, etc.&lt;/p&gt;

&lt;p&gt;You can modify a RigidBody2D&amp;rsquo;s behavior via properties such as &amp;ldquo;Mass&amp;rdquo;, &amp;ldquo;Friction&amp;rdquo;,
or &amp;ldquo;Bounce&amp;rdquo;, which can be set in the Inspector:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/rigidbody_properties.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/rigidbody_properties.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The body&amp;rsquo;s behavior is also affected by the world, via the &lt;em&gt;Project Settings -&amp;gt; Physics&lt;/em&gt;
properties, or by entering an &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_area2d.html&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34; target=&#34;_blank&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;Area2D&lt;/code&gt;&lt;/a&gt; that is overriding the global physics properties.&lt;/p&gt;

&lt;h2 id=&#34;using-rigidbody2d&#34;&gt;Using RigidBody2D&lt;/h2&gt;

&lt;p&gt;One of the benefits of using a rigid body is that a lot of behavior can be gotten &amp;ldquo;for
free&amp;rdquo; without writing any code. For example, let&amp;rsquo;s look at making a rudimentary
&amp;ldquo;Angry Birds&amp;rdquo;-style game with falling blocks. You only need to create RigidBody2Ds
for the blocks and projectile, and set their properties. Stacking, falling, and bouncing
will automatically be handled by the physics engine.&lt;/p&gt;

&lt;h3 id=&#34;stacking-blocks&#34;&gt;Stacking blocks&lt;/h3&gt;

&lt;p&gt;Start by making a RigidBody2D for the block and adding &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_sprite.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt;&lt;code&gt;Sprite&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_collisionshape2D.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_collision_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_collision_shape_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;CollisionShape2D&lt;/code&gt;&lt;/a&gt;
children:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/rigidbody_block_scene.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/rigidbody_block_scene.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add a texture to the Sprite and a rectangular collision shape. &lt;strong&gt;IMPORTANT&lt;/strong&gt;: Do &lt;em&gt;not&lt;/em&gt;
change the &lt;em&gt;Scale&lt;/em&gt; of the collision shape! In general this is a bad idea, and will
result in unexpected collision behavior. Always use the shape&amp;rsquo;s inner size handles and
not the outer &lt;code&gt;Node2D&lt;/code&gt;-derived scale handles.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; For the textures in this example, I&amp;rsquo;m using the &lt;a href=&#34;http://kenney.nl/assets/physics-assets&#34;&gt;Physics Asset&lt;/a&gt; pack from Kenney.nl. It contains a
wide variety of blocks in different shapes and materials.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Press &amp;ldquo;Play&amp;rdquo; and you&amp;rsquo;ll see the block fall slowly downward. This is due to the
default global gravity. You can find this setting in &amp;ldquo;Project Settings&amp;rdquo; under
&lt;em&gt;Physics -&amp;gt; 2d&lt;/em&gt;. You can also try changing the Block&amp;rsquo;s &lt;code&gt;Gravity Scale&lt;/code&gt; property in the
Inspector. I&amp;rsquo;m using a value of &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now create a Main scene (I usually use a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_node.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_node&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_node&#34;&gt;&lt;/svg&gt;Node&lt;/a&gt;) for the root).
Add a few &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_staticbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_staticbody2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_static_body_2d&#34;&gt;&lt;/svg&gt;StaticBody2D&lt;/a&gt;
nodes with rectangular collision shapes to serve as your &amp;ldquo;ground&amp;rdquo; and walls.&lt;/p&gt;

&lt;p&gt;Instance a Block, and then duplicate it (&lt;code&gt;Ctrl-D&lt;/code&gt; on Windows and &lt;code&gt;Cmd-D&lt;/code&gt; on MacOS)
so you can make a nice stack. Something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/rigidbody_scene1.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/rigidbody_scene1.png&#34; width=&#34;350&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;projectile&#34;&gt;Projectile&lt;/h3&gt;

&lt;p&gt;Create another scene with the same node setup as your Block, but name this one &amp;ldquo;Ball&amp;rdquo;. Use one of
the round textures and a circular collision shape. Instance this in your Main
scene and place it somewhere to the side of the stack of blocks.&lt;/p&gt;

&lt;p&gt;To cause a rigid body to move, it must have some velocity. You can give the body
an initial velocity using the &lt;code&gt;Linear -&amp;gt; Velocity&lt;/code&gt; property. Try setting this
to &lt;code&gt;(500, 0)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/rigidbody_vel.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/rigidbody_vel.gif&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also tinker with the ball&amp;rsquo;s &lt;code&gt;Friction&lt;/code&gt; and &lt;code&gt;Bounce&lt;/code&gt; properties. Both of
these properties can range from zero to one. I like a bounce of around &lt;code&gt;0.5&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; &lt;em&gt;NEVER&lt;/em&gt; scale a physics body! If you try, a warning will appear,
and when the scene runs, the physics engine will automatically set the scale back
to &lt;code&gt;(1, 1)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;forces&#34;&gt;Forces&lt;/h3&gt;

&lt;p&gt;Reset the linear velocity to &lt;code&gt;(0, 0)&lt;/code&gt;. Now what if you want to be able to toss
the ball? You should never set a rigid body&amp;rsquo;s velocity or position manually -
remember, these are simulating &amp;ldquo;real-world&amp;rdquo; style physics. In the real world,
objects can&amp;rsquo;t instantly jump from place to place or from a standstill to a high
speed. If you try and do so, the physics engine will resist it, and unexpected
movement can occur. Instead, we must apply forces which create an acceleration in a certain
direction (also known as Newton&amp;rsquo;s Second Law). Godot physics objects work in
the same way.&lt;/p&gt;

&lt;p&gt;To add force to a rigid body, you have two functions to choose from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add_force()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds a continuous force to the body. Imagine a rocket&amp;rsquo;s thrust, steadily
pushing it faster and faster. Note that this &lt;em&gt;adds&lt;/em&gt; to any already existing
forces. The force continues to be applied until removed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apply_impulse()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds an instantaneous &amp;ldquo;kick&amp;rdquo; to the body. Imagine hitting a baseball with a bat.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll use &lt;code&gt;apply_impulse()&lt;/code&gt; to kick the ball when we click, drag, and release
the mouse button.&lt;/p&gt;

&lt;p&gt;Open &amp;ldquo;Project Settings&amp;rdquo; and in the &amp;ldquo;Input Map&amp;rdquo; tab, add a new action called &amp;ldquo;click&amp;rdquo;.
Connect it to the left mouse button.&lt;/p&gt;

&lt;p&gt;Next, add a script to the Ball, and add the following code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RigidBody2D&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dragging&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;drag_start&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dragging&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;dragging&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;drag_start&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_global_mouse_position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_released&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dragging&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;dragging&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
		&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;drag_end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_global_mouse_position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
		&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dir&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;drag_start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;drag_end&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;apply_impulse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This script toggles &lt;code&gt;dragging&lt;/code&gt; on when the mouse button is pressed and records
the location of the click. When the button is released, we find the vector from
the click point to the release point and use that to apply the impulse (multiplying
by &lt;code&gt;5&lt;/code&gt; to scale it up). &lt;code&gt;apply_impulse()&lt;/code&gt; also takes an &lt;code&gt;offset&lt;/code&gt; as its first
parameter. This lets you &amp;ldquo;hit&amp;rdquo; the body off center, if you wish. For instance,
try setting it to &lt;code&gt;Vector2(25, 0)&lt;/code&gt; and you&amp;rsquo;ll add some spin to the ball when
it&amp;rsquo;s launched.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/rigidbody_impulse.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/rigidbody_impulse.gif&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;controlling-rigid-bodies&#34;&gt;Controlling Rigid Bodies&lt;/h2&gt;

&lt;p&gt;There are cases where you need more direct control of a rigid body. For example,
imagine you&amp;rsquo;re trying to make a version of the classic game &amp;ldquo;Asteroids&amp;rdquo;. The
player&amp;rsquo;s spaceship needs to rotate using the left/right arrow keys, and to move
forward when the up arrow is pressed.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the image I&amp;rsquo;m using for my ship:
&lt;a href=&#34;/blog/blog/img/ship_red.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/ship_red.png&#34; width=&#34;124&#34;&gt;&lt;/a&gt;
I recommend you also go to &lt;a href=&#34;http://opengameart.org/&#34;&gt;OpenGameArt&lt;/a&gt; and search for
a nice space background (but this is totally optional).&lt;/p&gt;

&lt;p&gt;Create a new scene for the ship as we did above with the following node structure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RigidBody2D&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Sprite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CollisionShape2D&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In Godot 3.0, &lt;code&gt;0&lt;/code&gt; degrees points to the left (along the &lt;strong&gt;x&lt;/strong&gt; axis).
This means you need to add a &lt;code&gt;Rotation&lt;/code&gt; of &lt;code&gt;90&lt;/code&gt; to the &lt;code&gt;Sprite&lt;/code&gt; so it will
match the body&amp;rsquo;s direction.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By default, the physics settings provide some &lt;em&gt;damping&lt;/em&gt;, which reduces a body&amp;rsquo;s
velocity and spin. In space, there&amp;rsquo;s no friction, so there shouldn&amp;rsquo;t be any
damping at all. However, for the &amp;ldquo;Asteroids&amp;rdquo; feel, we want the ship to stop rotating
when we let go of the keys, so set the ship&amp;rsquo;s &lt;code&gt;Angular -&amp;gt; Damp&lt;/code&gt; to &lt;code&gt;5&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RigidBody2D&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;engine_thrust&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spin_thrust&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;thrust&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rotation_dir&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;screensize&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_viewport&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_visible_rect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ui_up&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;thrust&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;engine_thrust&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;thrust&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;rotation_dir&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ui_right&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;rotation_dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ui_left&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;rotation_dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
		
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;get_input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_physics_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_applied_force&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;thrust&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rotated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rotation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_applied_torque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rotation_dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spin_thrust&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s walk through what this script is doing. The two variables, &lt;code&gt;engine_thrust&lt;/code&gt;
and &lt;code&gt;spin_thrust&lt;/code&gt; control how fast the ship can accelerate and turn. In the
Inspector, set them to &lt;code&gt;500&lt;/code&gt; and &lt;code&gt;25000&lt;/code&gt; respectively (the units of torque make
for large numbers). &lt;code&gt;thrust&lt;/code&gt; will represent the ship&amp;rsquo;s engine state: &lt;code&gt;(0, 0)&lt;/code&gt;
when coasting, or a vector with the length of &lt;code&gt;engine_thrust&lt;/code&gt; when powered on.
&lt;code&gt;rotation_dir&lt;/code&gt; will represent what direction the ship is turning. The &lt;code&gt;screensize&lt;/code&gt;
variable will capture the size of the screen, which we&amp;rsquo;ll be using later.&lt;/p&gt;

&lt;p&gt;Next, the &lt;code&gt;input()&lt;/code&gt; function captures the keystates and sets the ship&amp;rsquo;s &lt;code&gt;thrust&lt;/code&gt;
on or off, and the rotation direction (&lt;code&gt;rotation_dir&lt;/code&gt;) positive or negative. This
function is called every frame in &lt;code&gt;_process()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, physics-related functions should be called in &lt;code&gt;_physics_process()&lt;/code&gt;. Here
we use &lt;code&gt;set_applied_force()&lt;/code&gt; to apply the &lt;code&gt;thrust&lt;/code&gt; in whatever &lt;code&gt;direction&lt;/code&gt; the
ship is facing. Then we use &lt;code&gt;set_applied_torque()&lt;/code&gt; to cause the ship to rotate.&lt;/p&gt;

&lt;p&gt;Play the scene - you should be able to fly around freely.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/rigidbody_ship1.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/rigidbody_ship1.gif&#34; width=&#34;350&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-position-problem&#34;&gt;The Position Problem&lt;/h2&gt;

&lt;p&gt;Another feature of &amp;ldquo;Asteroids&amp;rdquo; is that the screen &amp;ldquo;wraps around&amp;rdquo;. If the player
goes off one side, it teleports to the other side. But we already talked above
about how you can&amp;rsquo;t change a rigid body&amp;rsquo;s position without breaking the physics
engine. This presents a huge problem when working with rigid bodies.&lt;/p&gt;

&lt;p&gt;A common mistake is to try adding something like this to &lt;code&gt;_physics_process()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_physics_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_applied_force&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;thrust&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rotated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rotation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_applied_torque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rotation_dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spin_thrust&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This fails spectacularly, trapping the player on the edge of the screen (with
occasional glitches). So why doesn&amp;rsquo;t this work? The docs say &lt;code&gt;_physics_process()&lt;/code&gt;
is for physics-related stuff, right?&lt;/p&gt;

&lt;p&gt;Not exactly. &lt;code&gt;_physics_process()&lt;/code&gt; is &lt;em&gt;synced&lt;/em&gt; to the physics timestep, but that
doesn&amp;rsquo;t make it OK to use for just anything. Hope is not lost, however, the answer
is in the docs.&lt;/p&gt;

&lt;p&gt;To quote the &lt;a href=&#34;http://docs.godotengine.org/en/latest/classes/class_rigidbody2d.html#description&#34;&gt;RigidBody2D docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You should not change a RigidBody2D’s position or linear_velocity every frame or even very often. If you need to directly affect the body’s state, use &lt;code&gt;_integrate_forces&lt;/code&gt;, which allows you to directly access the physics state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the &lt;a href=&#34;http://docs.godotengine.org/en/latest/classes/class_rigidbody2d.html#class-rigidbody2d-integrate-forces&#34;&gt;description for _integrate_forces&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Allows you to read and &lt;strong&gt;safely modify&lt;/strong&gt; the simulation state for the object. Use this instead of &lt;code&gt;_physics_process&lt;/code&gt; if you need to directly change the body’s position or other physics properties.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So there&amp;rsquo;s our answer. Instead of using &lt;code&gt;_physics_process()&lt;/code&gt; we need to use &lt;code&gt;_integrate_forces()&lt;/code&gt;,
which gives us access to the &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_physics2ddirectbodystate.html&#34; target=&#34;_blank&#34;&gt;Physics2DDirectBodyState&lt;/a&gt;. I highly recommend you take a look at the
linked document, there is a lot of really useful data provided in the physics state object.
For our purposes, the key piece of information is the body&amp;rsquo;s &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_transform2d.html&#34; target=&#34;_blank&#34;&gt;Transform2D&lt;/a&gt;.
(Explaining transforms is beyond the scope of this document - see &lt;a href=&#34;http://docs.godotengine.org/en/latest/learning/features/math/matrices_and_transforms.html&#34;&gt;Matrices and transforms&lt;/a&gt;
for more information.)&lt;/p&gt;

&lt;p&gt;The body&amp;rsquo;s position is contained in the transform&amp;rsquo;s &lt;code&gt;origin&lt;/code&gt;. Change &lt;code&gt;_physics_process()&lt;/code&gt;
to &lt;code&gt;_integrate_forces()&lt;/code&gt; and add the following code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_integrate_forces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_applied_force&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;thrust&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rotated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rotation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_applied_torque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rotation_dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spin_thrust&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;xform&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;origin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;xform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;origin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;origin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;xform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;origin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;origin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;xform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;origin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;origin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;xform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;origin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We grab the current transform, change it as necessary, and set it back as the new
transform. The physics engine stays happy, and everything works as expected:
&lt;a href=&#34;/blog/blog/img/rigidbody_ship2.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/rigidbody_ship2.gif&#34; width=&#34;350&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;When used properly, rigid bodies are a powerful tool in your Godot toolkit. Many
users get in trouble, however, when they use them for the wrong purposes, or
fail to understand exactly how they work.&lt;/p&gt;

&lt;p&gt;I hope you found this (fairly long) lesson useful. As Godot 3.0 nears release,
I&amp;rsquo;ll be putting out more &amp;ldquo;Know Your Nodes&amp;rdquo; and other 3.0-related content. Good
luck, and happy game making!&lt;/p&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://godotengine.org/article/dev-snapshot-godot-3-0-beta-2&#34;&gt;Download Godot 3.0 Beta 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Me on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot - Animating Tiles Using Shaders</title>
      <link>/blog/2017/08/godot_tilemap_shaders/</link>
      <pubDate>Sun, 06 Aug 2017 15:22:12 PDT</pubDate>
      
      <guid>/blog/2017/08/godot_tilemap_shaders/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/j2gJgFzg-yU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;animated-tiles&#34;&gt;Animated Tiles&lt;/h2&gt;

&lt;p&gt;Our goal for this project is to create an animated tile that we can use in a Godot &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_tilemap.html&#34; target=&#34;_blank&#34;&gt;TileMap&lt;/a&gt; like this example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/blog/blog/img/anim_tile1.gif&#34; width=&#34;250&#34;&gt;&lt;/p&gt;

&lt;p&gt;It is possible to do this using an &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_animationplayer.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_animation_player&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_animation_player&#34;&gt;&lt;/svg&gt;AnimationPlayer&lt;/a&gt; node (see &lt;a href=&#34; https://youtu.be/jYTGvlCQd0E&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; for details).  However, for this lesson, we are instead going to implement the tile animation using a &lt;a href=&#34;http://docs.godotengine.org/en/2.1/learning/features/shading/shading_language.html&#34; target=&#34;_blank&#34;&gt;Shader&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-shaders&#34;&gt;About Shaders&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;ve never encountered &lt;a href=&#34;https://en.wikipedia.org/wiki/Shader&#34; target=&#34;_blank&#34;&gt;shaders&lt;/a&gt; before, they can be very intimidating.  This is not intended to be a comprehensive introduction to the subject, so here are a few links to get you started:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.godotengine.org/en/2.1/learning/features/shading/shading_language.html&#34;&gt;Godot shader reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thebookofshaders.com/&#34;&gt;The Book of Shaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://notes.underscorediscovery.com/shaders-a-primer/&#34;&gt;Primer: Shaders&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;creating-a-new-shader&#34;&gt;Creating a new shader&lt;/h3&gt;

&lt;p&gt;We will start with a regular TileSet, which is just a collection of &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_sprite.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; Sprite&lt;/a&gt; nodes. You can use your own art, or download the &lt;a href=&#34;/blog/blog/img/anim_water.zip&#34;&gt;example water pack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Add a new &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_sprite.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; Sprite&lt;/a&gt; and name it &lt;code&gt;water shader&lt;/code&gt;.  You can use any texture you like, as the image will be replaced when our shader is working.&lt;/p&gt;

&lt;p&gt;Add a shader to the sprite by adding a new &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_canvasitemmaterial.html&#34; target=&#34;_blank&#34;&gt;CanvasItemMaterial&lt;/a&gt; followed by a new &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_canvasitemshader.html&#34; target=&#34;_blank&#34;&gt;CanvasItemShader&lt;/a&gt; like so:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/create_shader.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/create_shader.gif&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;When you have done this, you will see a new pane open, with three tabs labeled &lt;code&gt;Vertex&lt;/code&gt;, &lt;code&gt;Fragment&lt;/code&gt;, and &lt;code&gt;Lighting&lt;/code&gt;.  We will be creating a &amp;ldquo;fragment&amp;rdquo; (aka pixel) shader, so make sure the correct tab is selected.&lt;/p&gt;

&lt;h3 id=&#34;shader-code&#34;&gt;Shader code&lt;/h3&gt;

&lt;p&gt;Shader code uses syntax similar to C.  We will start by defining our textures (the frames for the animation).  There are 3 animations in the pack, each with 5 frames.  We will focus on one to start with:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-glsl&#34; data-lang=&#34;glsl&#34;&gt;&lt;span class=&#34;k&#34;&gt;uniform&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;texture&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frame1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;uniform&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;texture&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frame2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;uniform&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;texture&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frame3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;uniform&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;texture&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frame4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;uniform&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;texture&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frame5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;uniform&lt;/code&gt; keyword will expose the variable so that it can be set in the Inspector (similar to &lt;code&gt;export&lt;/code&gt; in GDScript).  If you look at the &lt;code&gt;CanvasItemMaterial&lt;/code&gt; now, you will see the 5 texture variables:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/shader_ex01.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/shader_ex01.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Drag the 5 textures into the 5 slots in the Inspector.  Let&amp;rsquo;s test to see if it works:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-glsl&#34; data-lang=&#34;glsl&#34;&gt;&lt;span class=&#34;n&#34;&gt;COLOR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frame1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UV&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This just sets each pixel of the sprite to use the corresponding pixel of &lt;code&gt;frame1&lt;/code&gt;.  Change it to &lt;code&gt;frame2&lt;/code&gt; and observe the difference.&lt;/p&gt;

&lt;h3 id=&#34;incorporating-time&#34;&gt;Incorporating time&lt;/h3&gt;

&lt;p&gt;Now we need that process to change with respect to time.  In Godot, the &lt;code&gt;TIME&lt;/code&gt; variable will contain the current time (in seconds).  This value will steadily increase, but we are only interested in the fractional part, so we will use that:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-glsl&#34; data-lang=&#34;glsl&#34;&gt;&lt;span class=&#34;k&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TIME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frame1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UV&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;COLOR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We check if the time is less than 0.5 and then use the texture pixel as before. Now you should see texture #1 for half a second, and nothing for the other half.  The only remaining thing is to break the second in to 5 parts and set the texture based on which fraction we are in.  We will also add a &lt;code&gt;speed&lt;/code&gt; uniform to allow easy adjustment of the animation speed.  Here is the final shader code in full:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-glsl&#34; data-lang=&#34;glsl&#34;&gt;&lt;span class=&#34;k&#34;&gt;uniform&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;texture&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frame1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;uniform&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;texture&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frame2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;uniform&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;texture&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frame3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;uniform&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;texture&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frame4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;uniform&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;texture&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frame5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;uniform&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TIME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frame1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UV&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frame2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UV&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frame3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UV&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frame4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UV&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frame5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UV&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;COLOR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;creating-the-tileset&#34;&gt;Creating the tileset&lt;/h3&gt;

&lt;p&gt;Now it just remains to save the sprites as a TileSet (&lt;code&gt;Scene -&amp;gt; Convert To.. -&amp;gt; TileSet..&lt;/code&gt;) and load it in your &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_tilemap.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_tile_map&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_tile_map&#34;&gt;&lt;/svg&gt; TileMap&lt;/a&gt;.  You can use the tile like any other, but when placed it will animate.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;Shaders are powerful, and this only scratches the surface of what you can do with them.  To learn more, see the links below to resources where you can learn more about how to create your own shader effects.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-releases-download-godot101-godot101-part-13-zip-project-files-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/releases/download/godot101/Godot101_Part_13.zip&#34;&gt;Project Files&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 13: KinematicBody2D Collisions Done Right</title>
      <link>/blog/2017/06/godot_101_13/</link>
      <pubDate>Sat, 24 Jun 2017 05:22:12 PDT</pubDate>
      
      <guid>/blog/2017/06/godot_101_13/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 13 of &amp;ldquo;Godot 101&amp;rdquo;. In this installment, we take a deeper look at how to handle KinematicBody2D collisions in a simple and accurate way, and how to avoid a few common mistakes.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/tkMSAme-BnY&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;doing-collisions-right&#34;&gt;Doing Collisions Right&lt;/h2&gt;

&lt;p&gt;We have seen before how the &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_kinematic_body_2D.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_kinematic_body_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_kinematic_body_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;KinematicBody2D&lt;/code&gt;&lt;/a&gt;
node is perfect for implementing characters and other moving bodies that don&amp;rsquo;t need the full simulation of physics, but just need movement and collision detection.  And while collision detection is very simple in Godot (the physics bodies just take care of it), we also need to understand how to make the bodies &lt;em&gt;respond&lt;/em&gt; to collisions.&lt;/p&gt;

&lt;p&gt;The basic structure of a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_kinematic_body_2D.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_kinematic_body_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_kinematic_body_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;KinematicBody2D&lt;/code&gt;&lt;/a&gt; scene is this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_kinematic_body_2d&#34;&gt;
&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_kinematic_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;KinematicBody2D&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;Sprite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_collision_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_collision_shape_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;CollisionShape2D&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the example in this demonstration, we&amp;rsquo;ll use a round image for the sprite, and a circular collision shape:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/ball.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/ball.png&#34; width=&#34;100&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When using a &lt;code&gt;KinematicBody2D&lt;/code&gt;, you must use the &lt;code&gt;move()&lt;/code&gt; method to change its position.  This method takes a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_vector2.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Vector2&lt;/code&gt;&lt;/a&gt; as its argument, which represents the distance &amp;amp; direction you wish to move the body.  The method returns another &lt;code&gt;Vector2&lt;/code&gt; representing the motion remaining after a collision.  We then have two choices of how to respond to this collision.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at this process in more detail:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_13_01.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_13_01.png&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Here we see the gray vector representing the desired movement, which we will pass to the move method.  However, the green obstacle is in the way, so the move will stop when the collision occurs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_13_02.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_13_02.png&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;The red vector is the returned value of the &lt;code&gt;move()&lt;/code&gt; method: representing the amount of the movement that was unable to be completed.  Now we have a choice: to &lt;em&gt;slide&lt;/em&gt; the body along the obstacle (as if it were sticky) or to &lt;em&gt;reflect&lt;/em&gt; it off (i.e. bounce).  In either case, we need to know the obstacle&amp;rsquo;s &lt;code&gt;normal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_13_03.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_13_03.png&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;normal&lt;/code&gt; vector is a unit-length vector pointing perpendicularly away from a surface.  This vector tells us what direction the surface is facing (for example which edge of a shape was hit).  Using this vector we can calculate the response.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_13_04.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_13_04.png&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;If we wish the body to slide along the object&amp;rsquo;s surface, we use &lt;code&gt;n.slide()&lt;/code&gt; and if we want it to bounce, we use &lt;code&gt;n.reflect()&lt;/code&gt;.  Note that the length of the resulting vector when using &lt;code&gt;slide()&lt;/code&gt; is only the &lt;em&gt;component&lt;/em&gt; of the remaining motion in the desired direction.&lt;/p&gt;

&lt;h3 id=&#34;seeing-it-in-action&#34;&gt;Seeing it in action&lt;/h3&gt;

&lt;p&gt;Here is an example using the &lt;code&gt;reflect()&lt;/code&gt; option:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_13_05.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_13_05.gif&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Note that not only flat surfaces have normals. Curved surfaces have a different normal at each point, resulting in a proper looking bounce off a round object:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_13_06.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_13_06.gif&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;On the other hand, if we switch to slide mode, the result looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_13_07.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_13_07.gif&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Note how the velocity vectors are much shorter, especially if the collision angle is steep.&lt;/p&gt;

&lt;h3 id=&#34;the-code&#34;&gt;The code&lt;/h3&gt;

&lt;p&gt;Here is the code for the ball object, including both kinds of collision response:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KinematicBody2D&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# pixels/sec&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# set this to &amp;lt; 1.0 to demonstrate loss of energy&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bounce_coefficent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# this toggles reflect or slide mode&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reflect&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;randomize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# set start velocity towards mouse position&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_global_mouse_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# move the body&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;motion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_colliding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;# find the normal&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_collision_normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reflect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
			&lt;span class=&#34;c1&#34;&gt;# reflect the motion *and* the velocity&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;motion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reflect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;motion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reflect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bounce_coefficent&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
			&lt;span class=&#34;c1&#34;&gt;# or slide them&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;motion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;motion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;# remember to also move by the resulting motion&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;motion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This should be self-explanatory.  Note that we reflect/slide both the remaining motion vector (so that the movement is continued) &lt;em&gt;and&lt;/em&gt; the velocity vector (so that it is now moving in the proper direction).&lt;/p&gt;

&lt;h2 id=&#34;important-read-this&#34;&gt;IMPORTANT: Read this!&lt;/h2&gt;

&lt;p&gt;Are your collisions doing this?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_13_08.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_13_08.gif&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;One of the most common mistakes we see among beginners when using physics bodies is incorrectly scaling the nodes.  For example, when creating the circular collision shape for the ball, you must use the &lt;em&gt;inner&lt;/em&gt; size handle to set the shape&amp;rsquo;s size.  Never use the outer rectangle, or you will cause the node to be scaled.&lt;/p&gt;

&lt;p&gt;If you have &amp;ldquo;glitchy&amp;rdquo; collisions, this is most likely the cause.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NEVER SCALE A PHYSICS BODY OR COLLISION SHAPE!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Always make sure that the &lt;code&gt;KinematicBody2D&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; the &lt;code&gt;CollisionShape2D&lt;/code&gt; have their &lt;code&gt;scale&lt;/code&gt; property set to &lt;code&gt;(1, 1)&lt;/code&gt;.  Always.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;Good collision response is easy if you follow a few simple rules, and take advantage of Godot&amp;rsquo;s built-in functions. If you&amp;rsquo;d like to experiment with the code used for the examples here, you can download the full project, or click the link below for the source code.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-releases-download-godot101-godot101-part-13-zip-collision-example-project-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/releases/download/godot101/Godot101_Part_13.zip&#34;&gt;Collision example project&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-godot-101-part-14-coming-soon-a&#34;&gt;&lt;a href=&#34;&#34;&gt;Godot 101 - Part 14 (coming soon)&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 12: Camera and Scrolling Background</title>
      <link>/blog/2017/04/godot_101_12/</link>
      <pubDate>Sat, 15 Apr 2017 05:22:12 PDT</pubDate>
      
      <guid>/blog/2017/04/godot_101_12/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 12 of &amp;ldquo;Godot 101&amp;rdquo;. In this installment, we add a camera to follow the player, and make a scrolling background.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/quVFPh1eotE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-bigger-world&#34;&gt;A Bigger World&lt;/h2&gt;

&lt;p&gt;Start by going to your &lt;code&gt;main&lt;/code&gt; scene and duplicating the platform instance 2 more times.  Take the new instances and arrange them to the right like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_12_01.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_12_01.png&#34; width=&#34;450&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have a much bigger &amp;ldquo;level&amp;rdquo; to run around in, but we can&amp;rsquo;t get to the new platforms because they&amp;rsquo;re off the screen. We need a &amp;ldquo;camera&amp;rdquo; that will track the player wherever he goes.  This is easily done in Godot using the &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_camera2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_camera_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_camera_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;Camera2D&lt;/code&gt;&lt;/a&gt; node.&lt;/p&gt;

&lt;p&gt;Switch to your &lt;code&gt;player&lt;/code&gt; scene and add a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_camera2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_camera_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_camera_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;Camera2D&lt;/code&gt;&lt;/a&gt; - I named mine &lt;code&gt;camera&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is what you&amp;rsquo;ll see in the Inspector:
&lt;a href=&#34;/blog/blog/img/godot101_12_02.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_12_02.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order for the camera to work, you must current the &lt;code&gt;Current&lt;/code&gt; property. It is possible to have multiple cameras in a scene, but only one can be &lt;code&gt;Current&lt;/code&gt;, and that is the one the game window will track.  That&amp;rsquo;s it!  Hit play and now you have a camera locked to the player:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_12_03.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_12_03.gif&#34; width=&#34;450&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to experiment with the other camera settings in the Inspector.  &lt;code&gt;Smoothing&lt;/code&gt; controls how the camera &amp;ldquo;catches up&amp;rdquo; to the player when it moves, and the &lt;code&gt;Drag Margin&lt;/code&gt; settings will let you adjust how close to the edge of the window the player can get before the camera moves.&lt;/p&gt;

&lt;h3 id=&#34;repeating-the-background&#34;&gt;Repeating the Background&lt;/h3&gt;

&lt;p&gt;Now we need to fix the issue of the background only covering part of the world.  What we want is for the background image to repeat itself as we scroll to the right.  So let&amp;rsquo;s adjust our background texture so Godot knows it can be tiled:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_12_04.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_12_04.gif&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you check the &amp;lsquo;Region&amp;rsquo; property, the background disappears!  Don&amp;rsquo;t worry, we need to fill in the &lt;code&gt;Region Rect&lt;/code&gt; property as well.  Set the width and height (&lt;code&gt;w&lt;/code&gt; and &lt;code&gt;h&lt;/code&gt;) to &lt;code&gt;(3072*4, 1536)&lt;/code&gt; and now you will see a long repeating texture.&lt;/p&gt;

&lt;h2 id=&#34;parallax-scrolling&#34;&gt;Parallax Scrolling&lt;/h2&gt;

&lt;p&gt;Finally, let&amp;rsquo;s add a really cool effect: parallax scrolling.  This means we want to have our background scroll at a different speed from the foreground.  Specifically, if we have it move &lt;em&gt;slower&lt;/em&gt;, it will give the impression that it is much farther away.  As you might expect, Godot has a node (actually, 2 nodes) for that.&lt;/p&gt;

&lt;p&gt;Switch to the &lt;code&gt;main&lt;/code&gt; scene and add a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_parallaxbackground.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_parallax_background&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_parallax_background&#34;&gt;&lt;/svg&gt;&lt;code&gt;ParallaxBackground&lt;/code&gt;&lt;/a&gt; node.  Drag it to the top of the tree.&lt;/p&gt;

&lt;p&gt;This node controls parallax scrolling, but you might want to have more than one layer of scrolling background.  For this reason, the &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_parallaxbackground.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_parallax_background&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_parallax_background&#34;&gt;&lt;/svg&gt;&lt;code&gt;ParallaxBackground&lt;/code&gt;&lt;/a&gt; node needs to contain one or more &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_parallaxlayer.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_parallax_layer&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_parallax_layer&#34;&gt;&lt;/svg&gt;&lt;code&gt;ParallaxLayer&lt;/code&gt;&lt;/a&gt; nodes.  Add one to the tree, and make the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;background&lt;/code&gt; its child.  Your scene tree should now look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_12_05.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_12_05.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The properties of the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_parallax_layer&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_parallax_layer&#34;&gt;&lt;/svg&gt;&lt;code&gt;ParallaxLayer&lt;/code&gt; are straightforward:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_12_06.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_12_06.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;motion/scale&lt;/code&gt; is what we want to change to adjust the movement speed of the background.  Change it to &lt;code&gt;(0.5, 0.5)&lt;/code&gt; and hit &amp;lsquo;Play&amp;rsquo;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_12_07.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_12_07.gif&#34; width=&#34;450&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_camera2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_camera_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_camera_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;Camera2D&lt;/code&gt;&lt;/a&gt; node in Godot is incredibly easy to use.  In combination with parallax scrolling, it&amp;rsquo;s possible to get a very rich visual effect with very little effort.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-06-godot-101-13-godot-101-part-13-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/06/godot_101_13/&#34;&gt;Godot 101 - Part 13&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 11: Animated Sprites</title>
      <link>/blog/2017/04/godot_101_11/</link>
      <pubDate>Sun, 09 Apr 2017 05:22:12 PDT</pubDate>
      
      <guid>/blog/2017/04/godot_101_11/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 11 of &amp;ldquo;Godot 101&amp;rdquo;. In this installment, we&amp;rsquo;ll add animation to the player character.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/rbWL8zFMWZc&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;animated-sprites&#34;&gt;Animated Sprites&lt;/h2&gt;

&lt;p&gt;In the art folder are animations for idle, running and jumping, and we&amp;rsquo;d like to use those animations on the player sprite.  However, a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_sprite.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt;&lt;code&gt;Sprite&lt;/code&gt;&lt;/a&gt; node can only use one texture at a time. Instead, we&amp;rsquo;ll use an &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_animatedsprite.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_animated_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_animated_sprite&#34;&gt;&lt;/svg&gt;&lt;code&gt;AnimatedSprite&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instead of creating a new node, we can convert the current one.  In the &lt;code&gt;player&lt;/code&gt; scene, right-click on the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;sprite&lt;/code&gt; node and choose &lt;code&gt;Change Type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The texture disappears and now we have a warning:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_11_01.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_11_01.png&#34; width=&#34;450&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_animatedsprite.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_animated_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_animated_sprite&#34;&gt;&lt;/svg&gt;&lt;code&gt;AnimatedSprite&lt;/code&gt;&lt;/a&gt; must have a &lt;code&gt;SpriteFrames&lt;/code&gt; resource defined. This resource will contain all the properties of the animation (frames, rate, etc).  In the Inspector, click the down arrow next to &lt;code&gt;Frames&lt;/code&gt; and choose &lt;code&gt;New SpriteFrames&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_11_02.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_11_02.png&#34; width=&#34;250&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, click the right arrow &lt;code&gt;&amp;gt;&lt;/code&gt; and a new panel will open:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_11_03.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_11_03.png&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;On the left, you can define multiple animations.  On the right will be the individual frames, arranged in order.  You can also specify whether the animation should loop, and at what speed it should run.&lt;/p&gt;

&lt;p&gt;Change the &lt;code&gt;default&lt;/code&gt; animation name to &lt;code&gt;idle&lt;/code&gt;, and drag the two frames of the idle animation from the &lt;code&gt;FileSystem&lt;/code&gt; tab into the &lt;code&gt;Animation Frames&lt;/code&gt; box. Make sure &lt;code&gt;Loop&lt;/code&gt; is set to &lt;code&gt;On&lt;/code&gt; .Now click back on the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_animated_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_animated_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;sprite&lt;/code&gt; node and check the box next to the &lt;code&gt;Playing&lt;/code&gt; property.  Our sprite is now animated!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_11_04.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_11_04.gif&#34; width=&#34;150&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The default speed is a little fast, so feel free to adjust the &lt;code&gt;Speed&lt;/code&gt; parameter; &lt;code&gt;3&lt;/code&gt; works pretty well.&lt;/p&gt;

&lt;p&gt;Next, to add the running animation, just click the new button and name the new animation &lt;code&gt;running&lt;/code&gt;.  Drag the 6 running animation frames into &lt;code&gt;Animation Frames&lt;/code&gt;. &lt;code&gt;8&lt;/code&gt; works well for the &lt;code&gt;Speed&lt;/code&gt; here.&lt;/p&gt;

&lt;h3 id=&#34;choosing-animations&#34;&gt;Choosing Animations&lt;/h3&gt;

&lt;p&gt;Now in the &lt;code&gt;player.gd&lt;/code&gt; we can specify which animation to play, and which direction to face (using the &lt;code&gt;Flip H&lt;/code&gt; property).&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;onready&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sprite&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sprite&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;anim&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;idle&amp;#34;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# set animation&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;anim&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;idle&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;anim&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;running&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sprite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_flip_h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sprite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_flip_h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sprite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;play&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;anim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First we choose which animation based on the player&amp;rsquo;s &lt;code&gt;vel.x&lt;/code&gt; and use the direction to select whether to flip the image.  However, when you run this you will notice that when the player stops moving, it doesn&amp;rsquo;t switch back to the &lt;code&gt;idle&lt;/code&gt; animation.  This is because while friction is reducing the vel.x, it&amp;rsquo;s a floating point number and never actually reaching 0. We can fix that by setting the speed to 0 if it falls below a certain value.  Add the following to &lt;code&gt;fixed_process()&lt;/code&gt; after the movement code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;platform-images&#34;&gt;Platform Images&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s change the appearance of the platforms as well. Instead of the plain green square, we can use this nice grass block image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/blog/blog/img/grass_main_64x64.png&#34; width=&#34;64&#34;&gt;&lt;/p&gt;

&lt;p&gt;Drag it from the art folder onto the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_texture&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_texture&#34;&gt;&lt;/svg&gt; &lt;code&gt;Texture&lt;/code&gt; property.  Oh no! This doesn&amp;rsquo;t look good:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot101_11_05.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;We can&amp;rsquo;t scale this block, so change the &lt;code&gt;Scale&lt;/code&gt; property back to &lt;code&gt;(1, 1)&lt;/code&gt;.  Now we can see the 64x64 block, but we&amp;rsquo;d like to be able to make the platforms as wide as we like.  Here&amp;rsquo;s how we do that:&lt;/p&gt;

&lt;p&gt;First, click the &lt;code&gt;&amp;gt;&lt;/code&gt; next to &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_texture&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_texture&#34;&gt;&lt;/svg&gt; &lt;code&gt;Texture&lt;/code&gt; and in &lt;code&gt;Flags&lt;/code&gt; make sure &lt;code&gt;Mipmaps&lt;/code&gt; and &lt;code&gt;Repeat&lt;/code&gt; are checked.&lt;/p&gt;

&lt;p&gt;Next, check the box labeled &lt;code&gt;Region&lt;/code&gt;.  The grass block will disappear, but that&amp;rsquo;s OK, we still need to fill in the &lt;code&gt;Region Rect&lt;/code&gt;, which is right now set to &lt;code&gt;(0, 0, 0, 0)&lt;/code&gt;.  This will be how we choose the size of our platform.  Set the height (&lt;code&gt;h&lt;/code&gt;) to &lt;code&gt;64&lt;/code&gt; and the width (&lt;code&gt;w&lt;/code&gt;) to &lt;code&gt;64*10&lt;/code&gt; (did you know you can type math expressions in property fields?).&lt;/p&gt;

&lt;p&gt;Finally, choose the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_collision_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_collision_shape_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;collision&lt;/code&gt; node and adjust the size to match the new image.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_11_06.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_11_06.gif&#34; width=&#34;250&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;background-image&#34;&gt;Background Image&lt;/h3&gt;

&lt;p&gt;Finally, let&amp;rsquo;s add a background image.  Go to the &lt;code&gt;main&lt;/code&gt; scene and add a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_sprite.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt;&lt;code&gt;Sprite&lt;/code&gt;&lt;/a&gt;. Make sure it&amp;rsquo;s at the top of the tree (right under &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_node&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_node&#34;&gt;&lt;/svg&gt;&lt;code&gt;main&lt;/code&gt;), so it will be behind the other objects.  Name this node &lt;code&gt;background&lt;/code&gt; and drag the background image into the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_texture&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_texture&#34;&gt;&lt;/svg&gt; &lt;code&gt;Texture&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/background.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/background.png&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;This image is quite large, so set the scale to &lt;code&gt;(0.5, 0.5)&lt;/code&gt; (or whatever you like).&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_animatedsprite.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_animated_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_animated_sprite&#34;&gt;&lt;/svg&gt;&lt;code&gt;AnimatedSprite&lt;/code&gt;&lt;/a&gt; nodes are a great way to add animation to your character (there are other ways, which we&amp;rsquo;ll get to later).&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-04-godot-101-12-godot-101-part-12-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/04/godot_101_12/&#34;&gt;Godot 101 - Part 12&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 10: RayCasts (and Jumping)</title>
      <link>/blog/2017/04/godot_101_10/</link>
      <pubDate>Thu, 06 Apr 2017 05:22:12 PDT</pubDate>
      
      <guid>/blog/2017/04/godot_101_10/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 10 of &amp;ldquo;Godot 101&amp;rdquo;. In this installment, we&amp;rsquo;ll learn about how to detect when a character is on the ground, so we can jump, by using the &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_raycast2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_ray_cast_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_ray_cast_2d&#34;&gt;&lt;/svg&gt;RayCast2D&lt;/a&gt; node.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/iaaBYHyvliI&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;getting-jumpy&#34;&gt;Getting Jumpy&lt;/h2&gt;

&lt;p&gt;Jumping is an important part of any platform game, but there are some things to consider when it comes to implementation.  At first glance, it&amp;rsquo;s very simple:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;JUMP_SPEED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# ...&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ui_up&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JUMP_SPEED&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The problem here is that tapping the key will jump, but holding it down sends the player flying up off the screen.  As long as the key is down, we continue to move upward.&lt;/p&gt;

&lt;p&gt;Instead, we want to only allow a jump if the player is standing on the ground.&lt;/p&gt;

&lt;p&gt;One approach to this would be to create a variable called &amp;ldquo;can_jump&amp;rdquo; and toggle it between &lt;code&gt;true/false&lt;/code&gt;: when you land, it&amp;rsquo;s &lt;code&gt;true&lt;/code&gt;, and when you jump, it&amp;rsquo;s &lt;code&gt;false&lt;/code&gt;.  This is a very common strategy and works just fine.&lt;/p&gt;

&lt;p&gt;However, we&amp;rsquo;re going to use a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_raycast2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_ray_cast_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_ray_cast_2d&#34;&gt;&lt;/svg&gt;RayCast2D&lt;/a&gt; to detect the ground beneath the player&amp;rsquo;s feet.&lt;/p&gt;

&lt;h3 id=&#34;casting-rays&#34;&gt;Casting Rays&lt;/h3&gt;

&lt;p&gt;Add one of these nodes to the player scene and name it &amp;ldquo;&lt;code&gt;ground_ray&lt;/code&gt;&amp;rdquo;.  You will see a blue arrow pointing downward from the center of the player. Let&amp;rsquo;s adjust its location by changing &lt;code&gt;Pos&lt;/code&gt; to &lt;code&gt;(0, 50)&lt;/code&gt; and its length by changing &lt;code&gt;Cast To&lt;/code&gt; to &lt;code&gt;(0, 20)&lt;/code&gt;.  You should see this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_10_01.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_10_01.png&#34; width=&#34;150&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Now to use this in the code, add this to &lt;code&gt;player.gd&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;onready&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ground_ray&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ground_ray&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;JUMP_SPEED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# ...&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ui_up&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ground_ray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_colliding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JUMP_SPEED&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we only jump when standing on the ground, but what happens if we hold the key?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot101_10_02.gif&#34; width=&#34;150&#34;&gt;&lt;/p&gt;

&lt;p&gt;Ideally, the player should jump one time when the jump key is pressed, then not again until it&amp;rsquo;s pressed again.  To do this, we can change the way we check for the key:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;set_process_input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ui_up&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ground_ray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_colliding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JUMP_SPEED&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Enabling input processing means that whenever an input event occurs, the &lt;code&gt;_input()&lt;/code&gt; function will be called.  We then use that event to trigger the jump, instead of doing it every frame in &lt;code&gt;_fixed_process()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;one-way-collisions&#34;&gt;One-way Collisions&lt;/h3&gt;

&lt;p&gt;Head over to the main scene and duplicate the platform instance so that you have two platforms arranged like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_10_03.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_10_03.png&#34; width=&#34;350&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you run, everything works fine, and you can jump to the upper platform.  But what about when you&amp;rsquo;re standing under it?  In some games, you&amp;rsquo;d like to allow the player to jump up through the platform and land on the top.  Godot has you covered.&lt;/p&gt;

&lt;p&gt;In the platform scene, find the following section in the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_static_body_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_static_body_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;platform&lt;/code&gt; node:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_10_04.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_10_04.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;One Way Collision&lt;/code&gt; section lets us set the object to only detect collisions in one direction.  Set &lt;code&gt;Direction&lt;/code&gt; to &lt;code&gt;(0, 1)&lt;/code&gt; (collide with things moving downward) and &lt;code&gt;Max Depth&lt;/code&gt; to &lt;code&gt;16&lt;/code&gt; (this is how far into the platform an object is allowed to penetrate before the one way collision takes effect).  Now you should have this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot101_10_05.gif&#34; width=&#34;150&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;varying-the-jump&#34;&gt;Varying the Jump&lt;/h3&gt;

&lt;p&gt;Many games allow the player to vary the height of the jump depending on how long they hold down the jump key or how quickly they release it.  We can do that easily using the &lt;code&gt;_input()&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;MIN_JUMP&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_released&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ui_up&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MIN_JUMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, if the player releases the jump key, we check the velocity.  If it&amp;rsquo;s less than -500 (going up &lt;em&gt;faster&lt;/em&gt;) then we clamp it to -500, cutting the jump short.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot101_10_06.gif&#34; width=&#34;150&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;In the next installment, we&amp;rsquo;ll add animations to the player.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-04-godot-101-11-godot-101-part-11-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/04/godot_101_11/&#34;&gt;Godot 101 - Part 11&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 9: Arcade Physics (KinematicBody2D)</title>
      <link>/blog/2017/04/godot_101_09/</link>
      <pubDate>Mon, 03 Apr 2017 05:22:12 PDT</pubDate>
      
      <guid>/blog/2017/04/godot_101_09/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 9 of &amp;ldquo;Godot 101&amp;rdquo;. In this installment, we&amp;rsquo;ll learn about how to do simple arcade-style physics using Godot&amp;rsquo;s built-in physics engine.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/oy9L0b5X0BY&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;new-project-and-game-art&#34;&gt;New Project and Game Art&lt;/h2&gt;

&lt;p&gt;For this lesson, we&amp;rsquo;re going to start by creating a new Godot project and a new scene.  The art we will use can be found on &lt;a href=&#34;http://opengameart.org/content/red-haired-run-and-jump-sprite-sheets&#34;&gt;OpenGameArt&lt;/a&gt;.  It contains the images for a few different character animations:&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Idle&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Running&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;sub&gt;&lt;img src=&#34;/blog/blog/img/godot101_09_01.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;/blog/blog/img/godot101_09_02.gif&#34; width=&#34;350&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Unpack it all into the &lt;code&gt;art&lt;/code&gt; folder in your project (I made a &lt;code&gt;player&lt;/code&gt; folder to put it all in).  We&amp;rsquo;ll talk about how to use these animations for our player character soon, but first we will create the scene and make the character move.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-the-scene&#34;&gt;Setting up the Scene&lt;/h3&gt;

&lt;p&gt;As we discussed earlier, there are 3 types of &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_physicsbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;PhysicsBody2D&lt;/code&gt;&lt;/a&gt; in Godot.  The one we will use for this project is the &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_kinematicbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_kinematic_body_2d&#34;&gt;
&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_kinematic_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;KinematicBody2D&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This node type has basic collision physics and movement, and is perfect for arcade-style games where you don&amp;rsquo;t need accurate, realistic physics.  Create the following scene tree and save it as &lt;code&gt;player.tscn&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_kinematic_body_2d&#34;&gt;
&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_kinematic_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;player (KinematicBody2D)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;sprite (Sprite)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_collision_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_collision_shape_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;collision (CollisionShape2D)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;sprite&lt;/code&gt; texture, drag the first frame of the idle animation (&lt;code&gt;idle-frame-1.png&lt;/code&gt;) into the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_texture&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_texture&#34;&gt;&lt;/svg&gt; &lt;code&gt;Texture&lt;/code&gt; field in the Inspector.&lt;/p&gt;

&lt;p&gt;The first thing you&amp;rsquo;ll notice is that the character is &lt;em&gt;huge&lt;/em&gt;.  This art was created at a very high resolution (which is nice - but it&amp;rsquo;s way too big for our screen).  Scroll down to the &lt;code&gt;Scale&lt;/code&gt; property and set it to &lt;code&gt;(0.2, 0.2)&lt;/code&gt; for a much more reasonable size.&lt;/p&gt;

&lt;p&gt;Now we can create the collision shape.  There are many different ways you can set up your collisions with different shapes, but for this exercise we&amp;rsquo;re going to choose the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_capsule_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_capsule_shape_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;CapsuleShape2D&lt;/code&gt;, which is a common choice for platformer characters.  Drag the size handles so that it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_09_03.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_09_03.png&#34; width=&#34;150&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Now we&amp;rsquo;re ready to write some code, so right-click on the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_kinematic_body_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_kinematic_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;player&lt;/code&gt; node and choose &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_script&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_script&#34;&gt;&lt;/svg&gt; &amp;ldquo;&lt;code&gt;Add Script&lt;/code&gt;&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;simple-physics&#34;&gt;Simple Physics&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s our starting point for the player script:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KinematicBody2D&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ACCEL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1500&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAX_SPEED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FRICTION&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;set_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First, we have 3 constants to adjust the player&amp;rsquo;s behavior:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ACCEL&lt;/code&gt; is how fast the player accelerates when a key is pressed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MAX_SPEED&lt;/code&gt; is the maximum speed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FRICTION&lt;/code&gt; controls how quickly the player comes to a stop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we have two &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_vector2.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Vector2&lt;/code&gt;&lt;/a&gt; variables to store the player&amp;rsquo;s movement.&lt;/p&gt;

&lt;p&gt;Finally, we are using the &lt;code&gt;fixed_process()&lt;/code&gt; function for per-frame code. This is recommended for physics bodies because the &lt;code&gt;delta&lt;/code&gt; time is fixed to &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;60&lt;/sub&gt; s (0.01667 s) and Godot&amp;rsquo;s physics engine works best with a fixed timestep.&lt;/p&gt;

&lt;p&gt;Now, let&amp;rsquo;s add the controls:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ui_right&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ui_left&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ACCEL&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FRICTION&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_SPEED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAX_SPEED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We start by getting the direction from the user&amp;rsquo;s input.  Each &lt;code&gt;is_action_pressed()&lt;/code&gt; results in either 0 or 1, so we will have a value of &lt;code&gt;1&lt;/code&gt; if &lt;code&gt;&amp;quot;ui_right&amp;quot;&lt;/code&gt; is pressed and &lt;code&gt;-1&lt;/code&gt; if &lt;code&gt;&amp;quot;ui_left&amp;quot;&lt;/code&gt; is pressed (these actions are mapped to the arrow keys by default). Note that if both keys are pressed, the result is &lt;code&gt;0&lt;/code&gt; - they cancel out.&lt;/p&gt;

&lt;p&gt;We then multiply this direction value by &lt;code&gt;ACCEL&lt;/code&gt; to get the correct magnitude and apply it to &lt;code&gt;vel&lt;/code&gt; for the updated speed.  The &lt;code&gt;clamp()&lt;/code&gt; function is used to keep the value of &lt;code&gt;vel.x&lt;/code&gt; from going above or below the &lt;code&gt;MAX_SPEED&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;If the player is not pressing a key (&lt;code&gt;acc.x&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;), then we apply &lt;code&gt;FRICTION&lt;/code&gt;, which will slow the player down.&lt;/p&gt;

&lt;p&gt;Now, if you followed the earlier tutorials, where we used an &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_area2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;Area2D&lt;/code&gt;&lt;/a&gt; node, you&amp;rsquo;ll recall we moved the object by using &lt;code&gt;set_pos()&lt;/code&gt;.  This is not correct for PhysicsBodies, because Godot needs to simulate them &lt;em&gt;moving&lt;/em&gt;, not teleporting to a new position.  Always use &lt;code&gt;move()&lt;/code&gt; to move a PhysicsBody or you may find things not working the way you expect.&lt;/p&gt;

&lt;p&gt;Press &amp;ldquo;Play&amp;rdquo; and try moving around.&lt;/p&gt;

&lt;h3 id=&#34;platforms-somewhere-to-fall&#34;&gt;Platforms: Somewhere to Fall&lt;/h3&gt;

&lt;p&gt;The next logical thing to add would be gravity, but then our player would just fall off the screen, so let&amp;rsquo;s add a platform to land on.  Create a new scene - this time we&amp;rsquo;re going to use &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_staticbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_static_body_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_static_body_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;StaticBody2D&lt;/code&gt;&lt;/a&gt; for the root node.  Set up the tree like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_static_body_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_static_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;platform&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;sprite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_collision_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_collision_shape_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;collision&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;re using &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_staticbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_static_body_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_static_body_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;StaticBody2D&lt;/code&gt;&lt;/a&gt; because it is a PhysicsBody that is optimized for static objects - things that don&amp;rsquo;t move, but just need to collide with other bodies.&lt;/p&gt;

&lt;p&gt;For the sprite, we&amp;rsquo;re going to use this simple colored square texture:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/green_square.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/green_square.png&#34; width=&#34;32&#34;&gt;&lt;/a&gt;&lt;sub&gt;Save this in your &amp;lsquo;art&amp;rsquo; folder&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Set this image as the sprite&amp;rsquo;s texture, and then we&amp;rsquo;ll use the &lt;code&gt;Scale&lt;/code&gt; property to size the platform.  Set it to &lt;code&gt;(20, 1)&lt;/code&gt; and then add a &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_rectangle_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_rectangle_shape_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;RectangleShape2D&lt;/code&gt; to the &lt;code&gt;collision&lt;/code&gt; node and size it to cover the sprite.&lt;/p&gt;

&lt;h3 id=&#34;adding-gravity&#34;&gt;Adding Gravity&lt;/h3&gt;

&lt;p&gt;Now let&amp;rsquo;s put it all together.  Create a new scene with a &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_node&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_node&#34;&gt;&lt;/svg&gt; &lt;code&gt;main&lt;/code&gt; node and click the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_instance&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_instance&#34;&gt;&lt;/svg&gt; &lt;code&gt;Instance&lt;/code&gt; button to add an instance of &lt;code&gt;player&lt;/code&gt; and &lt;code&gt;platform&lt;/code&gt;.  Arrange them in the scene like so:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_09_04.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_09_04.png&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Next, add the following to &lt;code&gt;player.gd&lt;/code&gt; and press &lt;code&gt;Play&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GRAVITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2000&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GRAVITY&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should see the player fall (due to &lt;code&gt;GRAVITY&lt;/code&gt; accelerating downward) and stop when it hits the platform.  But now you will find a new problem: the player can no longer move!&lt;/p&gt;

&lt;h3 id=&#34;collision-response&#34;&gt;Collision Response&lt;/h3&gt;

&lt;p&gt;The reason for this has to do with how our movement works, and what we do (or don&amp;rsquo;t do) when a collision occurs.  Here is our normal movement situation, when there are no obstacles:
&lt;img src=&#34;/blog/blog/img/godot101_09_05.png&#34; width=&#34;400&#34;&gt;&lt;/p&gt;

&lt;p&gt;Two forces are acting on the player (gravity, and the movement input) so the result is a diagonal vector.  However, if there is an obstacle in the path, we have this:
&lt;img src=&#34;/blog/blog/img/godot101_09_06.png&#34; width=&#34;400&#34;&gt;&lt;/p&gt;

&lt;p&gt;When Godot detects a collision with another &lt;code&gt;PhysicsBody2D&lt;/code&gt;, it immediately stops the movement.  Note that there is still a remaining portion of the movement vector that is unused.  In fact, this situation happens also when the player is standing on the platform:
&lt;img src=&#34;/blog/blog/img/godot101_09_07.png&#34; width=&#34;400&#34;&gt;&lt;/p&gt;

&lt;p&gt;Because the desired movement vector results in a collision, the movement is &lt;em&gt;immediately&lt;/em&gt; stopped, even though you may be pressing the arrow keys.&lt;/p&gt;

&lt;p&gt;Here is how this problem is solved:
&lt;img src=&#34;/blog/blog/img/godot101_09_08.png&#34; width=&#34;400&#34;&gt;&lt;/p&gt;

&lt;p&gt;We start by finding the &lt;em&gt;collision normal&lt;/em&gt;.  A &lt;em&gt;normal&lt;/em&gt; is a vector of length &lt;code&gt;1&lt;/code&gt; that is perpendicular to a surface.  It essentially tells us which way the surface is oriented.  In the case of our horizontal platform, the normal vector is &lt;code&gt;(0, -1)&lt;/code&gt;.  We can then use that normal to &lt;em&gt;slide&lt;/em&gt; the movement vector along the surface.&lt;/p&gt;

&lt;p&gt;Add the following code to  &lt;code&gt;fixed_process()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;motion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_colliding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_collision_normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;motion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;motion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;motion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First the &lt;code&gt;move()&lt;/code&gt; function we used before has a return value of the remaining movement vector, which we&amp;rsquo;re calling &lt;code&gt;motion&lt;/code&gt;.  Next we use &lt;code&gt;is_colliding()&lt;/code&gt; to check if a collision has happened.  If so, we find the collision normal and &lt;code&gt;slide&lt;/code&gt; the &lt;code&gt;motion&lt;/code&gt; and &lt;code&gt;vel&lt;/code&gt; vectors along it.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Those are the basics of using the &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_kinematicbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_kinematic_body_2d&#34;&gt;
&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_kinematic_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;KinematicBody2D&lt;/code&gt;&lt;/a&gt; node.  In the next installment, we&amp;rsquo;ll add jumping to the player.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-04-godot-101-10-godot-101-part-10-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/04/godot_101_10/&#34;&gt;Godot 101 - Part 10&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 8: Tweens and Timers</title>
      <link>/blog/2017/03/godot_101_08/</link>
      <pubDate>Sat, 18 Mar 2017 05:22:12 PDT</pubDate>
      
      <guid>/blog/2017/03/godot_101_08/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 8 of &amp;ldquo;Godot 101&amp;rdquo;. In this installment, we&amp;rsquo;ll learn about two of the simplest yet most useful nodes in Godot: the &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_tween.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_tween&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_tween&#34;&gt;&lt;/svg&gt;Tween&lt;/a&gt; and the &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_timer&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_timer&#34;&gt;&lt;/svg&gt;Timer&lt;/a&gt;.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/ToXknbBmCr8&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h3 id=&#34;adding-visual-appeal&#34;&gt;Adding visual appeal&lt;/h3&gt;

&lt;p&gt;In game design circles, it&amp;rsquo;s sometimes called &amp;ldquo;juice&amp;rdquo; - the little visual effects that make the difference between a game that&amp;rsquo;s boring and a game that feels great to play.&lt;/p&gt;

&lt;p&gt;Collecting the gems is a perfect example of a place where we could add a little juice.  It&amp;rsquo;s not very visually appealing to see the gems just vanish like they do now.  Instead, we&amp;rsquo;re going to use a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_tween.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_tween&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_tween&#34;&gt;&lt;/svg&gt;Tween&lt;/a&gt; to juice things up. Add a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_tween.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_tween&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_tween&#34;&gt;&lt;/svg&gt;Tween&lt;/a&gt; to the &lt;code&gt;gem&lt;/code&gt; scene and name it &lt;code&gt;&#39;effect&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For a great example of how Tweens work, have a look at this page: &lt;a href=&#34;http://easings.net&#34; target=&#34;_blank&#34;&gt;Easings.net&lt;/a&gt;.  &amp;ldquo;Easing&amp;rdquo; is another word that&amp;rsquo;s sometimes used in place of &amp;ldquo;tweening&amp;rdquo;.  Essentially, a tween is a way to change some value over time (from a start value to an end value) using a particular function. Hover over the different functions on this page to see how they work.&lt;/p&gt;

&lt;p&gt;When choosing a tween, you have two choices to make: 1) which function to use (examples: Sine or Bounce) and 2) which direction to apply that function (examples: In or In-Out).&lt;/p&gt;

&lt;h3 id=&#34;interpolating-properties&#34;&gt;Interpolating properties&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;Interpolation&amp;rdquo; means calculating the value(s) between two points.  In this case, we want to alter some of the properties of the gem&amp;rsquo;s &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt;&lt;code&gt;sprite&lt;/code&gt; node.  Specifically, the scale.  You can find Godot&amp;rsquo;s name for a node&amp;rsquo;s properties by hovering over the property name in the Inspector:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_08_01.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_08_01.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This tells us that we will be modifying the property &lt;code&gt;transform/scale&lt;/code&gt;.  We will use the tween&amp;rsquo;s &lt;code&gt;interpolate_property()&lt;/code&gt; function to define the animation:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Area2D&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;onready&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;effect&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;effect&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;onready&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sprite&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sprite&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gem_grabbed&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;effect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interpolate_property&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sprite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;transform/scale&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sprite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Tween&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TRANS_QUAD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tween&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EASE_OUT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_on_gem_area_enter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;area&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;player&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;emit_signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;gem_grabbed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;clear_shapes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;effect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_on_effect_tween_complete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;queue_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;interpolate_property()&lt;/code&gt; takes a number of arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;target object: the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt;&lt;code&gt;sprite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;target property: &lt;code&gt;transform/scale&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;starting value: the current value obtained from &lt;code&gt;get_scale()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ending value: we want to scale up to 2x&lt;/li&gt;
&lt;li&gt;duration (in s): 0.3s because we want a quick effect&lt;/li&gt;
&lt;li&gt;tween function: feel free to try other ones besides &lt;code&gt;TRANS_QUAD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;tween &amp;ldquo;ends&amp;rdquo;: you can also use other settings like &lt;code&gt;EASE_IN&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that the effect is set up, we use &lt;code&gt;start()&lt;/code&gt; to start it when the gem is touched.  However, we don&amp;rsquo;t want the gem to still be detecting collisions during the animation time, so we use &lt;code&gt;clear_shapes()&lt;/code&gt; to remove the collision detection.  Finally, we connect the tween&amp;rsquo;s &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_signal&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_signal&#34;&gt;&lt;/svg&gt;&lt;code&gt;tween_complete&lt;/code&gt; signal to actually delete the node.  Now our animation looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_08_02.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_08_02.gif&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is good, but we can do even better by interpolating &lt;em&gt;another&lt;/em&gt; property as well: the opacity.  Tweens get really powerful when you apply them to multiple properties at once.  Add this to the gem&amp;rsquo;s &lt;code&gt;_ready()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;effect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interpolate_property&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sprite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;visibility/opacity&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Tween&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TRANS_QUAD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tween&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EASE_OUT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now at the same time we&amp;rsquo;re scaling the sprite larger, we&amp;rsquo;re changing the opacity from 1 (fully visible) to 0 (fully transparent).  Now it looks even nicer:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_08_03.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_08_03.gif&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;timers&#34;&gt;Timers&lt;/h3&gt;

&lt;p&gt;Next we&amp;rsquo;re going to use the &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_timer&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_timer&#34;&gt;&lt;/svg&gt;Timer&lt;/a&gt; node to give our game a goal: collect as many gems as you can before the time runs out!&lt;/p&gt;

&lt;p&gt;Create a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_timer&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_timer&#34;&gt;&lt;/svg&gt;Timer&lt;/a&gt; node and call it &lt;code&gt;&#39;game_timer&#39;&lt;/code&gt;.  While you&amp;rsquo;re at it, add another &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_label.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_label&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_label&#34;&gt;&lt;/svg&gt;Label&lt;/a&gt; to the &lt;code&gt;HUD&lt;/code&gt; to display the countdown - call it &lt;code&gt;&#39;time_label&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_timer&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_timer&#34;&gt;&lt;/svg&gt;Timer&lt;/a&gt; node is also very simple, with only a few properties - set them as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_08_04.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_08_04.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Wait Time&lt;/code&gt;: how long the timer should run, in seconds&lt;/li&gt;
&lt;li&gt;&lt;code&gt;One Shot&lt;/code&gt;: if this is &lt;code&gt;false&lt;/code&gt;, the timer will restart every time it reaches zero&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Autostart&lt;/code&gt;: if this is &amp;lsquo;true&amp;rsquo;, the timer will start automatically when the node enters the tree&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the code we need to add to &lt;code&gt;main.gd&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;onready&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time_label&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HUD/time_label&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;onready&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;game_timer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;game_timer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;time_label&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;game_timer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_time_left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_on_game_timer_timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;player&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Don&amp;rsquo;t forget to connect the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_signal&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_signal&#34;&gt;&lt;/svg&gt;&lt;code&gt;timeout&lt;/code&gt; signal.  Here, we&amp;rsquo;re just disabling the player when the time runs out.  You might want to also add a &amp;ldquo;Game Over&amp;rdquo; label, setting it to &lt;code&gt;hidden&lt;/code&gt; when the game starts, and then showing it at game end.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;These two nodes are incredibly useful for many, many situations.  You should try to use tweens whenever possible - they just make everything look better.  Also, note that you can create these nodes directly in code as an alternative to adding them to the scene tree:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tween&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tween&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;add_child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tween&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Feel free to use timers all over your projects as well. They can be used to measure durations, create regular repeating effects, and lots more.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-04-godot-101-09-godot-101-part-9-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/04/godot_101_09/&#34;&gt;Godot 101 - Part 9&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 7: Using Signals</title>
      <link>/blog/2017/03/godot_101_07/</link>
      <pubDate>Wed, 01 Mar 2017 05:22:12 -0700</pubDate>
      
      <guid>/blog/2017/03/godot_101_07/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 7 of &amp;ldquo;Godot 101&amp;rdquo;. In this installment, we&amp;rsquo;ll learn how properly communicate between nodes, using a Godot feature called a &lt;em&gt;signal&lt;/em&gt;.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/5WnumDQyJhg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h3 id=&#34;communicating-between-scenes&#34;&gt;Communicating between scenes&lt;/h3&gt;

&lt;p&gt;In the last part, we caused the gems to disappear when they are touched by the player.  Now, we want something to happen when the gems are collected - specifically, we want to increase the player&amp;rsquo;s score.  The problem we have is that &lt;code&gt;score&lt;/code&gt; is a variable in the &lt;code&gt;main&lt;/code&gt; scene&amp;rsquo;s script, but the gem collection happens on the gem&amp;rsquo;s script.  Put another way, we need a way for the gem&amp;rsquo;s script to change a variable on &lt;code&gt;main&lt;/code&gt;.  The tree looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_07_01.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_07_01.png&#34; width=&#34;250&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Each &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;gem&lt;/code&gt; is a child of &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_node&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_node&#34;&gt;&lt;/svg&gt;&lt;code&gt;gem_container&lt;/code&gt;, which is a child of &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_node&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_node&#34;&gt;&lt;/svg&gt;&lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;obvious-but-wrong&#34;&gt;Obvious, but wrong&lt;/h3&gt;

&lt;p&gt;Many beginners (and many beginner tutorials) will solve this problem in an obvious but incorrect manner.  They look at the tree image above and think, &amp;ldquo;main is 2 levels above the gem, so I just need to go 2 levels up the tree.&amp;rdquo;  The result is a solution like this to the &lt;code&gt;gem&lt;/code&gt; script:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_on_gem_area_enter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;player&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;queue_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;../..&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gem_grabbed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And on &lt;code&gt;main.gd&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gem_grabbed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, this &lt;em&gt;will&lt;/em&gt; work, and you will see the score being printed every time you grab a gem. However there are several problems with this approach.  First, it can ruin your ability to test a scene separately.  For example, we can run the gem scene by itself (remember how we did that with the player to test out movement?), but when we do, there is no node 2 levels above it!  If you have code that uses &lt;code&gt;get_node(&#39;../..&#39;)&lt;/code&gt;, it will report an error.&lt;/p&gt;

&lt;p&gt;This method is also very fragile.  Because the gem scene is now written specifically to work with the main scene as it is &lt;em&gt;now&lt;/em&gt;, if you ever change the structure of &lt;code&gt;main&lt;/code&gt;, your gem code will be broken.&lt;/p&gt;

&lt;h3 id=&#34;signaling-events&#34;&gt;Signaling events&lt;/h3&gt;

&lt;p&gt;The correct method to solve this problem in Godot is to use &lt;em&gt;signals&lt;/em&gt;.  We&amp;rsquo;ve already used one of the built-in signals that &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_area2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;Area2D&lt;/code&gt;&lt;/a&gt; provides to trigger an event.  Now, we want to define a &lt;em&gt;custom&lt;/em&gt; signal that we can use when the gem is collected.  This can be done with the &lt;code&gt;signal&lt;/code&gt; keyword:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Area2D&lt;/span&gt;

&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gem_grabbed&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_on_gem_area_enter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;area&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;player&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;emit_signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;gem_grabbed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;queue_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we&amp;rsquo;ve created a custom signal called &lt;code&gt;gem_grabbed&lt;/code&gt; and then when the player touches the gem, we use &lt;code&gt;emit_signal()&lt;/code&gt; to trigger it.&lt;/p&gt;

&lt;p&gt;Now, in &lt;code&gt;main.gd&lt;/code&gt; we just need to connect that signal to a function:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spawn_gems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;gem_container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;gem_grabbed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;_on_gem_grabbed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;

&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_on_gem_grabbed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As each gem instance is created, we connect its &lt;code&gt;gem_grabbed&lt;/code&gt; signal to a local function called &lt;code&gt;on_gem_grabbed()&lt;/code&gt; (following the &lt;code&gt;_on_*&lt;/code&gt; naming scheme that Godot uses by default). Any time that signal is emitted, the function will be called.&lt;/p&gt;

&lt;p&gt;Running the game now will result in exactly the same behavior as before, but by using Godot&amp;rsquo;s &lt;code&gt;signal&lt;/code&gt; functionality, we avoid the pitfalls of hard-coding the tree structure in our code.  If you ever find yourself typing &lt;code&gt;get_node(&#39;..&#39;)&lt;/code&gt; or &lt;code&gt;get_tree().get_root()&lt;/code&gt; you probably would be better off using a signal instead.&lt;/p&gt;

&lt;h3 id=&#34;displaying-information&#34;&gt;Displaying information&lt;/h3&gt;

&lt;p&gt;Finally, let&amp;rsquo;s display the score on the game screen, rather than printing it in the console log.  To start, we&amp;rsquo;re going to add to &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_node&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_node&#34;&gt;&lt;/svg&gt;&lt;code&gt;main&lt;/code&gt; a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_control.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_control&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_control&#34;&gt;&lt;/svg&gt;&lt;code&gt;Control&lt;/code&gt;&lt;/a&gt; node.  This is the base node type for all Godot&amp;rsquo;s various GUI nodes.  Name this node &lt;code&gt;HUD&lt;/code&gt; (&amp;ldquo;heads-up display&amp;rdquo;).  The &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_control&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_control&#34;&gt;&lt;/svg&gt;&lt;code&gt;HUD&lt;/code&gt; will contain all the nodes we want to have displaying information on the screen, as an overlay on top of the rest of the game.&lt;/p&gt;

&lt;p&gt;We want the &lt;code&gt;HUD&lt;/code&gt; to be the same size as our game window, so we will use the &lt;code&gt;anchor&lt;/code&gt; properties of the node (all &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_control.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_control&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_control&#34;&gt;&lt;/svg&gt;&lt;code&gt;Control&lt;/code&gt;&lt;/a&gt; nodes have these properties) and set them like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_07_02.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_07_02.png&#34; width=&#34;250&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These settings control where the margin of the node will be measured in relation to the parent node.  So if we set our margins like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_07_03.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_07_03.png&#34; width=&#34;250&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;HUD&lt;/code&gt;&amp;rsquo;s size will be exactly the same as the parent&amp;rsquo;s, even if the parent node changes. Click the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_lock&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_lock&#34;&gt;&lt;code&gt;Lock&lt;/code&gt;&lt;/svg&gt; button at the top to prevent accidentally clicking the node and moving it.&lt;/p&gt;

&lt;p&gt;Now to display the score, we will use a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_label.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_label&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_label&#34;&gt;&lt;/svg&gt;&lt;code&gt;Label&lt;/code&gt;&lt;/a&gt; and name it &lt;code&gt;score_label&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a simple node that displays text.  You can type directly into the &lt;code&gt;Text&lt;/code&gt; property and see it on the screen:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_07_04.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_07_04.png&#34; width=&#34;250&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We won&amp;rsquo;t be talking about formatting the text (fonts, styles, etc.) just yet, but if you want the text bigger, don&amp;rsquo;t resize the node (that will set the size of the node, not the text inside), you can use the &lt;code&gt;Scale&lt;/code&gt; property in the inspector.  Set it to something like &lt;code&gt;(2.5, 2.5)&lt;/code&gt;.  It won&amp;rsquo;t look great, but that&amp;rsquo;s ok for now.&lt;/p&gt;

&lt;p&gt;To have the score displayed, we just need to have our script update the &lt;code&gt;Text&lt;/code&gt; property whenever the score changes, so add this to &lt;code&gt;main.gd&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;n&#34;&gt;onready&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score_label&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HUD/score_label&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_on_gem_grabbed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;score_label&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can see our score change whever we grab a gem:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_07_05.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_07_05.gif&#34; width=&#34;350&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Signals are a very powerful feature in Godot, and something that is important to understand well.  Resist the temptation to use &lt;code&gt;get_node(&#39;..&#39;)&lt;/code&gt;, especially when using instanced scenes. It may be hard to grasp at first, but with practice you&amp;rsquo;ll find it&amp;rsquo;s a far more robust way of doing things.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-03-godot-101-08-godot-101-part-8-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/03/godot_101_08/&#34;&gt;Godot 101 - Part 8&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 6: Area-based Collisions</title>
      <link>/blog/2017/02/godot_101_06/</link>
      <pubDate>Thu, 23 Feb 2017 05:22:12 -0700</pubDate>
      
      <guid>/blog/2017/02/godot_101_06/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 6 of &amp;ldquo;Godot 101&amp;rdquo;. In this installment, we&amp;rsquo;ll learn how to detect when two collision areas overlap, so we can make our player run around and pick up gems.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/RZyiy9bbeNE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h3 id=&#34;gem-scene&#34;&gt;Gem Scene&lt;/h3&gt;

&lt;p&gt;First, let&amp;rsquo;s create a new scene for our gem objects.  The tree will look like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;gem&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;sprite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_collision_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_collision_shape_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;collision&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;ll use the gem image from the art folder, and a basic &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_rectangleshape2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_rectangle_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_rectangle_shape_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;RectangleShape2D&lt;/code&gt;&lt;/a&gt; for the collision.  Resize it to cover the sprite texture, and remember: &lt;em&gt;don&amp;rsquo;t scale the collision shape!&lt;/em&gt;  Use the handles to adjust the extents of your rectangle - see the previous lesson if you need help.&lt;/p&gt;

&lt;h3 id=&#34;main-scene&#34;&gt;Main Scene&lt;/h3&gt;

&lt;p&gt;Now we can start building our main scene.  The root will just be a plain &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_node.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_node&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_node&#34;&gt;&lt;/svg&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; named &amp;ldquo;main&amp;rdquo;. Click the &amp;ldquo;Instance&amp;rdquo; button: &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_instance&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_instance&#34;&gt;&lt;/svg&gt; and choose the player scene.&lt;/p&gt;

&lt;p&gt;We don&amp;rsquo;t want to have to add a bunch of gem instances manually, so we&amp;rsquo;re going to do it in code.  We&amp;rsquo;ll be spawning lots of gems, and we will want to keep track of how many are left, so let&amp;rsquo;s make a node to hold them all.  Add another &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_node.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_node&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_node&#34;&gt;&lt;/svg&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; as a child of &lt;code&gt;main&lt;/code&gt; and call it &lt;code&gt;gem_container&lt;/code&gt;.  Then add a script to the &lt;code&gt;main&lt;/code&gt; node with the following code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;onready&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;preload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;res://gem.tscn&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;onready&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gem_container&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;gem_container&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;randomize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_viewport&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_rect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;set_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;spawn_gems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spawn_gems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;gem_container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rand_range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
                          &lt;span class=&#34;n&#34;&gt;rand_range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this script, we use &lt;code&gt;preload&lt;/code&gt; to load the gem scene into memory so we can use it to create instances.  We also assign a variable to the &lt;code&gt;gem_container&lt;/code&gt; node so we can easily refer to it.  Our &lt;code&gt;spawn_gems&lt;/code&gt; function just takes a number and creates that many gem instances, assigning them as children of &lt;code&gt;gem_container&lt;/code&gt; and setting &lt;code&gt;pos&lt;/code&gt; to a random location.  Run the scene, and you should see this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_06_01.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_06_01.png&#34; width=&#34;350&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;area-collisions-using-signals&#34;&gt;Area collisions - using signals&lt;/h3&gt;

&lt;p&gt;We want to have the gem disappear (be picked up) when the player touches it.  Click on the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;gem&lt;/code&gt; node and then click &amp;ldquo;Node&amp;rdquo; in the Inspector:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_06_02.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_06_02.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a list of all the signals that an &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_area2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;Area2D&lt;/code&gt;&lt;/a&gt; node can produce.  The ones labeled &lt;code&gt;area_*&lt;/code&gt; are for detecting other area nodes, while the &lt;code&gt;body*&lt;/code&gt; ones are for detecting &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_physicsbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;PhysicsBody2D&lt;/code&gt;&lt;/a&gt; nodes.  The one we want to use is &lt;code&gt;area_enter&lt;/code&gt; which will return the area that entered - in our case the player.&lt;/p&gt;

&lt;p&gt;Click on the &lt;code&gt;area_enter&lt;/code&gt; signal and click the &amp;ldquo;Connect&amp;rdquo; button.  You will then see the following dialog:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_06_03.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_06_03.png&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;This lets us set what node we want the signal to be sent to.  &lt;code&gt;gem&lt;/code&gt; is highlighted in red because it&amp;rsquo;s the current node.  That&amp;rsquo;s fine, and at the bottom we&amp;rsquo;ll leave the &amp;ldquo;Method in Node&amp;rdquo; name as it is.  Godot will now create that function for us.  To start, let&amp;rsquo;s fill it out like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_on_gem_area_enter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now when you move the player over a gem, you will see &amp;ldquo;player&amp;rdquo; printed in the output window.  However, if you run it a couple of times, you might see something like this as well:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@gem@4
@gem@7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What&amp;rsquo;s happening here?  Well, this signal is generated when &lt;em&gt;any&lt;/em&gt; area enters the gem&amp;rsquo;s area.  This includes other gems!  If we just deleted a gem when this signal happens, then two touching gems would delete each other, and we don&amp;rsquo;t want that.  So we&amp;rsquo;re going to make sure and check the name of the entering area:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_on_gem_area_enter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;player&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;queue_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;spawning-more-gems&#34;&gt;Spawning more gems&lt;/h3&gt;

&lt;p&gt;Back in our &lt;code&gt;main&lt;/code&gt; scene, we want to detect when the player has collected all the gems, so we can spawn more.  We do that by looking at the &lt;code&gt;gem_container&lt;/code&gt; and counting its children:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;level&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gem_container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_child_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;level&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;spawn_gems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;level&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We add a variable called &lt;code&gt;level&lt;/code&gt; and whenever the &lt;code&gt;gem_container&lt;/code&gt; is empty, we increment it and spawn more gems.  Collect away!&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;The next step will be to increment the player&amp;rsquo;s score when they collect a gem.  However, there&amp;rsquo;s a catch:  the code that detects collision and deletes the gem is running on the gem node, while the code that holds the score (and will display it) is on the &lt;code&gt;main&lt;/code&gt; node.  So we need a way to have an instanced node communicate with another node that is farther up the tree.  This is a common occurrence, but is often done incorrectly by beginners.  In the next lesson, we&amp;rsquo;ll look at the &lt;em&gt;wrong&lt;/em&gt; (but obvious) way to do this, and then show how to do it properly.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-03-godot-101-07-godot-101-part-7-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/03/godot_101_07/&#34;&gt;Godot 101 - Part 7&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 5: Player-controlled Sprite</title>
      <link>/blog/2017/02/godot_101_05/</link>
      <pubDate>Sun, 19 Feb 2017 05:22:12 -0700</pubDate>
      
      <guid>/blog/2017/02/godot_101_05/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 5 of &amp;ldquo;Godot 101&amp;rdquo;. In this installment, we&amp;rsquo;ll learn how to use player input to move a sprite around the screen.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/FgtekgMca2E&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;player-scene&#34;&gt;Player Scene&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/art.zip&#34;&gt;Click here&lt;/a&gt; to download a zip of the art we&amp;rsquo;re going to use for this lesson. Unpack it in your project folder.&lt;/p&gt;

&lt;p&gt;First let&amp;rsquo;s create a scene for our player.  What node should we choose for our root node?  It depends on what kind of collisions and physics we need.  If you click on &lt;code&gt;Add Node&lt;/code&gt; and search for &amp;ldquo;collision&amp;rdquo; you will see there is a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_collisionobject2d.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;CollisionObject2D&lt;/code&gt;&lt;/a&gt; that has a few children:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_collisionobject2d.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;CollisionObject2D&lt;/code&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_area2d.html&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34; target=&#34;_blank&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;Area2D&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_physicsbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;PhysicsBody2D&lt;/code&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_staticbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_static_body_2d&#34;&gt;
&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_static_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;StaticBody2D&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_rigidbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_rigid_body_2d&#34;&gt;
&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_rigid_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;RigidBody2D&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_kinematicbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_kinematic_body_2d&#34;&gt;
&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_kinematic_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;KinematicBody2D&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These nodes are all for implementing different kinds of collision and physics in your game - which one you choose depends on your goal.  A brief summary:&lt;/p&gt;

&lt;h5 id=&#34;a-href-http-docs-godotengine-org-en-stable-classes-class-area2d-html-svg-width-18-height-18-class-icon-icon-area-2d-target-blank-use-xlink-href-blog-img-symbol-defs-svg-icon-icon-area-2d-svg-area2d-a&#34;&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_area2d.html&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34; target=&#34;_blank&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;Area2D&lt;/code&gt;&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;This node is a general purpose area detection node.  It can detect when another object enters or leaves its area but doesn&amp;rsquo;t have any physics properties.  This is great for when you simply need to know when one object overlaps another.&lt;/p&gt;

&lt;h5 id=&#34;a-href-http-docs-godotengine-org-en-stable-classes-class-kinematicbody2d-html-target-blank-svg-width-18-height-18-class-icon-icon-kinematic-body-2d-use-xlink-href-blog-img-symbol-defs-svg-icon-icon-kinematic-body-2d-svg-kinematicbody2d-a&#34;&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_kinematicbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_kinematic_body_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_kinematic_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;KinematicBody2D&lt;/code&gt;&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;This node is for what is sometimes called &amp;ldquo;arcade physics&amp;rdquo; (hence the little &lt;em&gt;Space Invaders&lt;/em&gt; icon).  It is not affected by physics (gravity, etc.) but will collide with other bodies.  This is good for player controlled bodies that need collision - for example, a platform character that doesn&amp;rsquo;t fall through the ground.&lt;/p&gt;

&lt;h5 id=&#34;a-href-http-docs-godotengine-org-en-stable-classes-class-rigidbody2d-html-target-blank-svg-width-18-height-18-class-icon-icon-rigid-body-2d-use-xlink-href-blog-img-symbol-defs-svg-icon-icon-rigid-body-2d-svg-rigidbody2d-a&#34;&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_rigidbody2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_rigid_body_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_rigid_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;RigidBody2D&lt;/code&gt;&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;This is the node to use for full-on physics simulation.  Objects of this type will behave realistically when interacting with the environment.  You would use this, for example, if you were making an &lt;em&gt;Angry Birds&lt;/em&gt; style game and wanted stacks of blocks that would tumble down when hit.&lt;/p&gt;

&lt;h5 id=&#34;a-href-http-docs-godotengine-org-en-stable-classes-class-staticbody2d-html-svg-width-18-height-18-class-icon-icon-static-body-2d-use-xlink-href-blog-img-symbol-defs-svg-icon-icon-static-body-2d-svg-staticbody2d-a&#34;&gt;&lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_staticbody2d.html&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_static_body_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_static_body_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;StaticBody2D&lt;/code&gt;&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;This is a &lt;em&gt;static&lt;/em&gt; physics body, meaning it is designed to represent non-moving objects like walls, trees, etc. - anything that will not be moving around.&lt;/p&gt;

&lt;p&gt;For this particular project, we&amp;rsquo;re going to stick with the &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_area2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;Area2D&lt;/code&gt;&lt;/a&gt; for our player.  Add one to the scene and name it &amp;ldquo;player&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;By itself, collision nodes are not visible, so we need to add a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_sprite.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt;&lt;code&gt;Sprite&lt;/code&gt;&lt;/a&gt; to display our character&amp;rsquo;s image.  In the &amp;ldquo;art/Player&amp;rdquo; folder are the images for our character.  Drag the standing image into the node&amp;rsquo;s &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_texture&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_texture&#34;&gt;&lt;/svg&gt;&lt;code&gt;Texture&lt;/code&gt; field:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_05_01.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_05_01.gif&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s scale the sprite down a little and make sure it&amp;rsquo;s centered on the parent node by setting the following values in the Inspector:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;collision-shapes&#34;&gt;Collision Shapes&lt;/h3&gt;

&lt;p&gt;If we stopped here, we wouldn&amp;rsquo;t actually have any collision detetion, because any &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_collisionobject2d.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;CollisionObject2D&lt;/code&gt;&lt;/a&gt; must have a collision shape defined.  We&amp;rsquo;re going to use a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_collisionshape2D.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_collision_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_collision_shape_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;CollisionShape2D&lt;/code&gt;&lt;/a&gt;.  Add it as a child of &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;player&lt;/code&gt; and select a &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_rectangleshape2d.html&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_rectangle_shape_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_rectangle_shape_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;RectangleShape2D&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_05_02.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_05_02.gif&#34; width=&#34;150&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Now we need to adjust our collision shape to define the collision area.  &lt;em&gt;Important:&lt;/em&gt; do &lt;em&gt;not&lt;/em&gt; drag the scale handles.  Scaling a physics object will not work and may break things.  Use the inner handles to adjust the extents of the rectangle:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_05_03.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_05_03.gif&#34; width=&#34;100&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;h3 id=&#34;input-mapping&#34;&gt;Input Mapping&lt;/h3&gt;

&lt;p&gt;We are going to use the arrow keys to move our player. In Godot, all the player input functions are described under &lt;code&gt;Scene -&amp;gt; Project Settings -&amp;gt; Input Map&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_05_04.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_05_04.png&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;In this window, you can set up whatever input actions you want to use, and assign various controls to them - keys, mouse buttons, game pads, etc.  For this demo, we&amp;rsquo;re going to stick with the already-defined actions for the four arrow keys: &lt;code&gt;&amp;quot;ui_up&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;ui_left&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;ui_right&amp;quot;&lt;/code&gt;, and &lt;code&gt;&amp;quot;ui_down&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;player-script&#34;&gt;Player Script&lt;/h3&gt;

&lt;p&gt;Now, let&amp;rsquo;s add a script to the player node:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Area2D&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First, we&amp;rsquo;re creating a variable to set our player&amp;rsquo;s speed.  The &lt;code&gt;export&lt;/code&gt; keyword does something special: save this script, then click on the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt;&lt;code&gt;player&lt;/code&gt; node and look at the Inspector.  Now we can change the value of &lt;code&gt;speed&lt;/code&gt; directly in the Inspector!&lt;/p&gt;

&lt;p&gt;The movement is going to be similar to how we did it in the previous lesson - we move the position by adding &lt;code&gt;vel * delta&lt;/code&gt;.  But our sprite won&amp;rsquo;t move, because we need to detect the keys:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ui_right&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ui_left&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ui_down&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ui_up&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we&amp;rsquo;re creating an &lt;code&gt;input&lt;/code&gt; vector to hold the direction the player is holding - a combination of whatever keys are pressed.  &lt;code&gt;Input.is_action_pressed()&lt;/code&gt; will return &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt;, so we can get the total movement in each axis by subtracting the negative direction key from the positive one.&lt;/p&gt;

&lt;p&gt;Once we have the input vector, we must &lt;code&gt;normalize()&lt;/code&gt; it so that &lt;code&gt;(1, 1)&lt;/code&gt; is not faster than &lt;code&gt;(1, 0)&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Area2D&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;

&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;set_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_viewport_rect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;collision&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_extents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_fixed_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ui_right&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ui_left&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ui_down&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_action_pressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ui_up&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;wrapping-around&#34;&gt;Wrapping Around&lt;/h3&gt;

&lt;p&gt;Finally, we&amp;rsquo;ve copied-and-pasted from the last lesson the &lt;code&gt;_ready()&lt;/code&gt; code to grab the sizes of the screen and collision shape.  Then we&amp;rsquo;re using those to limit the movement of the sprite to a minimum and maximum value (this is what &lt;code&gt;clamp()&lt;/code&gt; does).&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;That will do it for our player&amp;rsquo;s movement.  In the next part, we&amp;rsquo;ll put some items on the screen for our player to collect and explore how to detect collisions with an &lt;a href=&#34;http://docs.godotengine.org/en/stable/classes/class_area2d.html&#34;&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_area_2d&#34; target=&#34;_blank&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_area_2d&#34;&gt;&lt;/svg&gt; &lt;code&gt;Area2D&lt;/code&gt;&lt;/a&gt; node.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-02-godot-101-06-godot-101-part-6-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/02/godot_101_06/&#34;&gt;Godot 101 - Part 6&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 4: Instancing Scenes</title>
      <link>/blog/2017/02/godot_101_04/</link>
      <pubDate>Wed, 15 Feb 2017 05:22:12 -0700</pubDate>
      
      <guid>/blog/2017/02/godot_101_04/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 4 of &amp;ldquo;Godot 101&amp;rdquo;, taking our bouncing sprite and showing how to quickly create multiple instances of it.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/0WOqJy3lot4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;instancing&#34;&gt;Instancing&lt;/h2&gt;

&lt;p&gt;Now that we have a nice animated sprite bouncing around the screen, the natural next question is &amp;ldquo;how do I make a bunch of them?&amp;rdquo;  If we want, say, 10 sprites bouncing around, we don&amp;rsquo;t want to have to make 10 separate scenes for them.&lt;/p&gt;

&lt;p&gt;Your first thought might be to duplicate the sprite node by right-clicking on it and choosing &amp;ldquo;Duplicate&amp;rdquo;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_04_01.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_04_01.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;However, this won&amp;rsquo;t work - you get an error message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot101_04_02.png&#34; width=&#34;300&#34;&gt;&lt;/p&gt;

&lt;p&gt;Each scene tree has a root node - the first node you create - and can only have &lt;em&gt;one&lt;/em&gt; root node.  We could make another sprite as a &lt;em&gt;child&lt;/em&gt; of the first one, but that wouldn&amp;rsquo;t give use what we need - a child node is attached to its parent, inheriting its position, etc.  We need to create multiple independent versions of the original sprite.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll start by making a new scene (click on &lt;code&gt;Scene&lt;/code&gt; -&amp;gt; &amp;lsquo;New Scene&amp;rsquo;) and add a node to it.  We&amp;rsquo;re going to use the simplest node available: &lt;svg width=&#34;24&#34; height=&#34;24&#34; class=&#34;icon-icon_node&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_node&#34;&gt;&lt;/svg&gt;&lt;code&gt;Node&lt;/code&gt;.  This is a generic node, with no properties of its own.  This will be our main scene&amp;rsquo;s root node, so let&amp;rsquo;s rename it &amp;ldquo;main&amp;rdquo; by clicking on its name and then save it as &amp;ldquo;main.tscn&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Now click the &amp;ldquo;Play&amp;rdquo; button at the top and you&amp;rsquo;ll see this message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot101_04_03.png&#34; width=&#34;400&#34;&gt;&lt;/p&gt;

&lt;p&gt;We need to define what scene will be the one that is launched when the project starts.  Click &amp;ldquo;Select&amp;rdquo; and choose our new main.tscn. Now let&amp;rsquo;s add a script to the main node.  This will be our code to instance a sprite:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;onready&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sprite&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;preload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;res://Sprite.tscn&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sprite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;add_child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That first line uses the &lt;code&gt;preload&lt;/code&gt; function to load the sprite scene into memory at compile time, so that it&amp;rsquo;s ready to use.  The &lt;code&gt;onready&lt;/code&gt; statement ensures that the object is loaded in time for the &lt;code&gt;_ready()&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A note on resource paths&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;Notice how we indicated where to load the sprite scene from: &amp;ldquo;res://Sprite.tscn&amp;rdquo;  All resources in your project will be under a &amp;ldquo;res://&amp;rdquo; path (&amp;ldquo;res&amp;rdquo; is short for resource).  If we were building a complex project with a large number of files, we might choose to put all our scenes into their own folder to help keep things organized.  In this case, the resource path might look like this: &amp;ldquo;res://scenes/Sprite.tscn&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Now hit &amp;ldquo;Play&amp;rdquo;, and you will see a sprite bouncing around the screen.  To see what&amp;rsquo;s going on, click the debugger and you can inspect the live scene tree:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_04_04.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_04_04.gif&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;The Remote Inspector tab is very useful to see what&amp;rsquo;s going on in the game - what scene is active, what nodes are active, and what properties they all have.  For example, observe what changes is we add a loop to spawn more sprites:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sprite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;add_child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s that easy to create instances of scenes you&amp;rsquo;ve created.  In the future, this is how we&amp;rsquo;ll do things like spawning mobs or bullets - just by instancing them as needed and adding them to the current scene tree.  In the next lesson we&amp;rsquo;ll start looking at some other nodes and how they&amp;rsquo;re used.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-02-godot-101-05-godot-101-part-5-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/02/godot_101_05/&#34;&gt;Godot 101 - Part 5&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 3: Scripting (continued)</title>
      <link>/blog/2017/02/godot_101_03/</link>
      <pubDate>Mon, 13 Feb 2017 05:22:12 -0700</pubDate>
      
      <guid>/blog/2017/02/godot_101_03/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 3 of &amp;ldquo;Godot 101&amp;rdquo;, where we&amp;rsquo;ll finish scripting our bouncing animated sprite.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wkDiwOAqfuI&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;scripting-continued&#34;&gt;Scripting (continued)&lt;/h2&gt;

&lt;p&gt;In the last lesson, we created a script to move our &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;Sprite&lt;/code&gt;, but it goes off the edge of the screen, and we want to change that.  We&amp;rsquo;re going to do it in a simple way first, then modify it to be more robust.&lt;/p&gt;

&lt;p&gt;First, we need to know how big our screen is.  Screen size is set in the Project Settings (click Scene -&amp;gt; Project Settings), but we need our script to use those values:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sprite&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_viewport_rect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_rot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_rot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PI&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;get_viewport_rect()&lt;/code&gt; gives us the screensize (you can look it up in the help if you want to see the details - or click &lt;a target=&#34;_blank&#34; href=&#34;http://docs.godotengine.org/en/stable/classes/class_canvasitem.html?highlight=get_viewport_rect&#34;&gt;here&lt;/a&gt; to see the docs).&lt;/p&gt;

&lt;p&gt;Then we use a new variable, &lt;code&gt;pos&lt;/code&gt;, to keep track of our position. If its &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; goes out of bounds, we reverse the velocity in that axis.  Now we stay on the screen, but we still have a problem:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_03_01.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_03_01.gif&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;The sprite doesn&amp;rsquo;t bounce until it goes halfway off the screen.  That&amp;rsquo;s because the &lt;code&gt;Pos&lt;/code&gt; property is the center of the sprite (there&amp;rsquo;s a checkbox marked &lt;code&gt;Centered&lt;/code&gt; that will change it to the upper left).  That means we need to calculate half the width &amp;amp; height of the sprite to have it bounce properly.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sprite&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;150&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_viewport_rect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_texture&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_rot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_rot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PI&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;re handling this with a new variable called &lt;code&gt;extents&lt;/code&gt; which we fill using &lt;code&gt;get_texture()&lt;/code&gt; - we also divide it by 2 because we only care about half of the width/height.&lt;/p&gt;

&lt;p&gt;Next, we have to update our bouncing tests to add/subtract the extents to the wall positions, and now we&amp;rsquo;re bouncing correctly.&lt;/p&gt;

&lt;h2 id=&#34;randomizing&#34;&gt;Randomizing&lt;/h2&gt;

&lt;p&gt;As a last step, we&amp;rsquo;re going to randomize the velocity and spin using the &lt;code&gt;rand_range()&lt;/code&gt; function:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sprite&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spin&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;randomize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_viewport_rect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_texture&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rand_range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rotated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rand_range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;spin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rand_range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;set_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;set_rot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_rot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;screensize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;One important thing to keep in mind when using randomized commands:  by default, Godot will produce the same sequence of &amp;ldquo;random&amp;rdquo; numbers every time you run the game unless you first use &lt;code&gt;randomize()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;That completes our bouncing sprite.  In the next lesson, we&amp;rsquo;ll explore how to use this Sprite scene to add to a larger scene and allow us to spawn multiple sprites.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-02-godot-101-04-godot-101-part-4-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/02/godot_101_04/&#34;&gt;Godot 101 - Part 4&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 2: Scripting</title>
      <link>/blog/2017/02/godot_101_02/</link>
      <pubDate>Sat, 11 Feb 2017 05:22:12 -0700</pubDate>
      
      <guid>/blog/2017/02/godot_101_02/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 2 of &amp;ldquo;Godot 101&amp;rdquo;, where we&amp;rsquo;ll introduce Godot&amp;rsquo;s scripting language, GDScript.  If you haven&amp;rsquo;t already read through the previous parts, please start with &lt;a href=&#34;http://kidscancode.org/blog/2017/02/godot_101_01/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/hi2yiY-zNxQ&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;scripting&#34;&gt;Scripting&lt;/h2&gt;

&lt;p&gt;In the last part, we created our &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;Sprite&lt;/code&gt; node and set its texture.  However, if you look in the Inspector tab, you&amp;rsquo;ll see there are lots of properties that you can set for a &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;Sprite&lt;/code&gt; node:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_02_01.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_02_01.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;For example, if you pick up the sprite and move it around, you&amp;rsquo;ll see the &lt;code&gt;Pos&lt;/code&gt; property change.  You can also click on the property and type in the coordinates you want.  To write a script that will move the sprite around, this is the property we want to control.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s add a script.  Right-click on the &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;Sprite&lt;/code&gt; in the scene tab, and choose &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_script&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_script&#34;&gt;&lt;/svg&gt;&lt;code&gt;Add Script&lt;/code&gt;.  You&amp;rsquo;ll see the following window:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_02_02.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_02_02.png&#34; width=&#34;350&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We don&amp;rsquo;t need to change anything here, but I&amp;rsquo;ll just point out a couple of things.  First, the &lt;code&gt;Inherits&lt;/code&gt; box lists &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;Sprite&lt;/code&gt; - if you&amp;rsquo;re familiar with Object-Oriented Programming (OOP), you&amp;rsquo;ll recognize this means our script is going to &lt;em&gt;extend&lt;/em&gt; the Sprite class.  We&amp;rsquo;ll have all the properties and functionality of a Godot Sprite, plus whatever we add ourselves.  The file will be named &amp;ldquo;Sprite.gd&amp;rdquo;, which is fine.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sprite&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# class member variables go here, for example:&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# var a = 2&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# var b = &amp;#34;textvar&amp;#34;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# Called every time the node is added to the scene.&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# Initialization here&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the default script, and it has some helpful comments to get you started. Go ahead and delete the comments (lines starting with &lt;code&gt;#&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve used Python, GDScript will look very familar. &lt;code&gt;func _ready()&lt;/code&gt; indicates a &lt;em&gt;function&lt;/em&gt;.  This &lt;code&gt;_ready()&lt;/code&gt; function will be called every time the node is created and added to the scene (like when we click &amp;ldquo;Play Scene&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;To show how this works, try adding the following line to the &lt;code&gt;_ready()&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you play the scene, you will see the sprite&amp;rsquo;s coordinates (the same ones in the &lt;code&gt;Pos&lt;/code&gt; property of the Inspector) appear in the &amp;ldquo;Output&amp;rdquo; tab of the Godot window. But how do we know what methods we can use on a &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;Sprite&lt;/code&gt; node?  Let&amp;rsquo;s use the built-in reference documentation:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_02_03.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_02_03.gif&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Here we can see all the methods a &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;Sprite&lt;/code&gt; node has.  But &lt;code&gt;get_pos()&lt;/code&gt; isn&amp;rsquo;t there!  That&amp;rsquo;s because if you look at the Inspector again, &lt;code&gt;Pos&lt;/code&gt; is a property of &lt;code&gt;Node2D&lt;/code&gt;, which &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;Sprite&lt;/code&gt; inherits from.  Click &lt;code&gt;Node2D&lt;/code&gt; and you&amp;rsquo;ll see the &lt;code&gt;get_pos()&lt;/code&gt; method description, which tells us it returns a &lt;code&gt;Vector2&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;To move the sprite, we need to change the value of &lt;code&gt;Pos&lt;/code&gt; over time.  Just like any other game engine, Godot is running a loop at a certain speed (typically 60 frames per second), and we just want to move the sprite a little bit each frame.  Here&amp;rsquo;s our updated code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sprite&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First, we declare a variable called &lt;code&gt;vel&lt;/code&gt; and set it to &lt;code&gt;Vector2(1, 1)&lt;/code&gt; - we will move our sprite 1 pixel each to the right and down.&lt;/p&gt;

&lt;p&gt;Next, we have to call the &lt;code&gt;set_process&lt;/code&gt; function and set it to &lt;code&gt;true&lt;/code&gt;.  This tells Godot that this object wants to do something every frame.  What it will do is whatever code we put in the &lt;code&gt;_process()&lt;/code&gt; function.  Now when we run, we&amp;rsquo;ll see this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_02_04.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_02_04.gif&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;This is fine, but we can do better.  One of the things we need to take into account is that the game loop may not always run at exactly 60 fps.  That means that if we move the same distance every frame, our movement may not be smooth.  In other words, instead of our velocity being in units of pixels/frame we want the units to be pixels/second.  We can accomplish this using the &lt;code&gt;delta&lt;/code&gt; parameter, which measures exactly how long it&amp;rsquo;s been since the previous frame:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sprite&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s the basics of scripting. We added a script to our &lt;code&gt;Sprite&lt;/code&gt; node to make it do something every frame.  For fun, try making the sprite rotate by adding this to the &lt;code&gt;_process&lt;/code&gt; function:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span class=&#34;n&#34;&gt;set_rot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_rot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PI&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Feel free to try changing other properties of the node and see what happens.&lt;/p&gt;

&lt;p&gt;In the next lesson, we&amp;rsquo;ll finish our script by making sure the sprite stays on the screen by bouncing off the edges.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-02-godot-101-03-godot-101-part-3-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/02/godot_101_03/&#34;&gt;Godot 101 - Part 3&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Godot 101 - Part 1: Introduction to Godot</title>
      <link>/blog/2017/02/godot_101_01/</link>
      <pubDate>Wed, 08 Feb 2017 05:22:12 -0700</pubDate>
      
      <guid>/blog/2017/02/godot_101_01/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot_logo.png&#34; width=&#34;450&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is part 1 of &amp;ldquo;Godot 101&amp;rdquo;, where we&amp;rsquo;ll give an overview of what a game engine is in general, and what Godot is in specific.&lt;/p&gt;

&lt;h3 id=&#34;about-this-series&#34;&gt;About this series&lt;/h3&gt;

&lt;p&gt;Godot 101 is an introduction to the Godot game engine and how it works. If you&amp;rsquo;ve never used a game engine before, or if you&amp;rsquo;re just new to Godot, this is the place to start.  If you&amp;rsquo;re new here, a quick note about this website: we&amp;rsquo;re called KidsCanCode because we teach programming and game development to kids, but if you&amp;rsquo;re an adult you&amp;rsquo;re welcome here, too.  We don&amp;rsquo;t believe in dumbing-down the material for kids, and game development is &lt;em&gt;hard&lt;/em&gt; - so it will probably be challenging no matter what your age.
&lt;/p&gt;

&lt;p&gt;You can watch a video version of this lesson here:
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/gHA4M2cqWb0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;game-engine&#34;&gt;Game Engine?&lt;/h2&gt;

&lt;p&gt;A game engine is sort of an all-in-one software package for making video games.  The purpose of most game engines is to make development easier by taking care of all the low level details, leaving the developer free to focus on making the actual game.  By &amp;ldquo;low level details&amp;rdquo;, we mean things like &lt;em&gt;rendering&lt;/em&gt; (producing the graphics), animation, collisions and physics, networking, etc.  In other words, the things you &lt;em&gt;need&lt;/em&gt; to make your game, but aren&amp;rsquo;t the actual game itself.&lt;/p&gt;

&lt;h2 id=&#34;why-godot&#34;&gt;Why Godot?&lt;/h2&gt;

&lt;p&gt;Most of you reading this have probably heard of &lt;a href=&#34;http://unity3d0.com&#34;&gt;Unity&lt;/a&gt;, which is the 500 lb gorilla of the game industry.  Many companies, large and small, use Unity - you&amp;rsquo;ve probably played games made with Unity, whether you realized it or not.&lt;/p&gt;

&lt;p&gt;Even though it&amp;rsquo;s popular, Unity has some drawbacks, especially for beginners. For example, Unity is designed for 3D and while it supports 2D, that support is not very good, and is not easy to deal with. We have often said that beginners should start with 2D games, because working in 3D adds yet another layer of complexity.  Once you have a strong handle on the 2D fundamentals, it will be much easier to make the step up to 3D.&lt;/p&gt;

&lt;p&gt;Godot, on the other hand, is very good at both 2D and 3D, making it a much better learning platform.  In addition, while Unity is technically free, it is commercial software, and you are required to pay for a license if your game makes a certain amount of money.  One of Godot&amp;rsquo;s big advantages is that it is 100% free.  It is open source (MIT License), which means that you will never pay anything for it, no matter what.&lt;/p&gt;

&lt;p&gt;On top of all that, Godot supports all the most popular platforms for games - PC, mobile, and even consoles!&lt;/p&gt;

&lt;p&gt;Finally, Godot&amp;rsquo;s scripting language (GDScript) is very similar to Python (it was based on it).  We think &lt;a href=&#34;/blog/blog/2015/09/whypython/&#34;&gt;Python is a great choice for beginners&lt;/a&gt;, so if you&amp;rsquo;ve been studying Python, Godot will be a smooth transition for you.&lt;/p&gt;

&lt;p&gt;For these reasons, we&amp;rsquo;re big fans of Godot for learning game development.&lt;/p&gt;

&lt;p&gt;Now, let&amp;rsquo;s look at some concepts:&lt;/p&gt;

&lt;h2 id=&#34;nodes-and-scenes&#34;&gt;Nodes and Scenes&lt;/h2&gt;

&lt;p&gt;In Godot, everything is a &lt;code&gt;Node&lt;/code&gt;.  A node can represent a sprite, an animation, a sound, or just about anything else in your project.  Every node has a few things in common:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name - each node can be referred to by name&lt;/li&gt;
&lt;li&gt;Properties - every node has a whole set of properties that define how it looks, acts, etc.&lt;/li&gt;
&lt;li&gt;Callback - each has a callback function that can be set to process during every frame&lt;/li&gt;
&lt;li&gt;Extendable - with code, any node can be extended to have additional properties and functionality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another very important characteristic of Nodes is they can be assigned to other nodes as children, creating a &lt;em&gt;tree&lt;/em&gt; structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/blog/blog/img/godot101_01_1.png&#34; width=&#34;250&#34;&gt;&lt;/p&gt;

&lt;p&gt;In a tree, every node can have one (and only one) &lt;code&gt;parent&lt;/code&gt; and any number of &lt;code&gt;children&lt;/code&gt;.  A node can inherit behavior and properties from its parent, allowing you to organize them in a logical manner.&lt;/p&gt;

&lt;p&gt;A group of nodes arranged in a tree is called a &lt;code&gt;Scene&lt;/code&gt;.  In Godot, scenes can be saved/loaded, duplicated, and can even spawn other scenes.  Running a game means running a scene.  All of your work in the Godot editor will be setting up and organizing scenes.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-godot-project&#34;&gt;Creating a Godot project&lt;/h2&gt;

&lt;p&gt;You can download Godot here: &lt;a href=&#34;http://godotengine.org/&#34;&gt;http://godotengine.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you first open Godot, you will see the &amp;ldquo;Project Manager&amp;rdquo; window:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_01_2.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_01_2.png&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;In this window you can see a list of the Godot projects you may be working on. To start a new project, click &amp;ldquo;New Project&amp;rdquo;. Every project in Godot starts with a folder, so we need to create one - just pick a location that&amp;rsquo;s convenient for you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_01_3.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_01_3.gif&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Now just click &amp;ldquo;Edit&amp;rdquo; to open the project.&lt;/p&gt;

&lt;h2 id=&#34;a-simple-scene&#34;&gt;A simple scene&lt;/h2&gt;

&lt;p&gt;This is the main Godot editor window you will see when you open a new project:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_01_4.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_01_4.png&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;The center of the window is your view of the game.  Using the buttons at the top marked &amp;ldquo;2D&amp;rdquo; and &amp;ldquo;3D&amp;rdquo;, you can change the mode. Let&amp;rsquo;s stick with &amp;ldquo;2D&amp;rdquo; for this one.&lt;/p&gt;

&lt;p&gt;On the right side is a window labeled &amp;ldquo;Scene&amp;rdquo;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_01_5.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_01_5.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;This is where we&amp;rsquo;ll build our &lt;code&gt;Scene&lt;/code&gt; (tree of nodes).  We can add a node by clicking the + button.  Now we can see a (long!) list of different node types to choose from.  This can be very overwhelming, but don&amp;rsquo;t worry - for most projects you may not ever use the majority of these nodes.  They are there for you if you need them.  The nodes are sorted into a hierarchy - green for UI nodes, blue for 2D nodes, and red for 3D nodes (plus some miscellaneous white and yellow ones).&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re going to type &amp;ldquo;sprite&amp;rdquo; in the search box to narrow the list down to the node we&amp;rsquo;re looking for (&lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_sprite&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_sprite&#34;&gt;&lt;/svg&gt; &lt;code&gt;Sprite&lt;/code&gt;) and click &amp;ldquo;Create&amp;rdquo;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_01_6.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_01_6.gif&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Now we have a sprite in our scene, but it&amp;rsquo;s up in the corner and it doesn&amp;rsquo;t look very impressive.  You can control your view with the mouse: middle-click-and-drag will pan your view around, and the scroll wheel will control zoom.&lt;/p&gt;

&lt;p&gt;To be able to see our sprite, we need to add a &lt;svg width=&#34;18&#34; height=&#34;18&#34; class=&#34;icon-icon_texture&#34;&gt;&lt;use xlink:href=&#34;/blog/img/symbol-defs.svg#icon-icon_texture&#34;&gt;&lt;/svg&gt; &lt;code&gt;Texture&lt;/code&gt; to it.  We&amp;rsquo;re going to use the Godot icon that&amp;rsquo;s included with every new project.  Now, let&amp;rsquo;s look at the &amp;ldquo;Inspector&amp;rdquo; tab in the lower-right:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_01_7.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_01_7.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Every time you click on a node in your scene, the Inspector will show all of that node&amp;rsquo;s properties - and there are a lot of them!  The one we care about is the first one, &amp;ldquo;Texture&amp;rdquo;, which is currently showing &lt;code&gt;&amp;lt;null&amp;gt;&lt;/code&gt;.  To set it, just drag the Godot icon image on top of the spot where you see &lt;code&gt;&amp;lt;null&amp;gt;&lt;/code&gt;.  Our sprite has an image!  Pick it up and drag it to the center of the screen.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_01_8.png&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_01_8.png&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s our first simple scene!  To finish up, let&amp;rsquo;s save and run it.  To do that, click on the &amp;ldquo;Play the edited scene&amp;rdquo; button.  You will be asked to save your scene, and then click the button again:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/img/godot101_01_9.gif&#34;&gt;&lt;img src=&#34;/blog/blog/img/godot101_01_9.gif&#34; width=&#34;550&#34;&gt;&lt;/a&gt;&lt;sub&gt;Click to enlarge&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it - your first Godot scene!  In later lessons, we&amp;rsquo;ll explore more nodes, begin writing code, and more.  If you have any questions, please post them below.&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-github-com-kidscancode-godot-tutorials-tree-master-godot101-full-code-for-this-part-a&#34;&gt;&lt;a href=&#34;https://github.com/kidscancode/godot_tutorials/tree/master/Godot101&#34;&gt;Full code for this part&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;a-href-blog-2017-02-godot-101-02-godot-101-part-2-a&#34;&gt;&lt;a href=&#34;/blog/blog/2017/02/godot_101_02/&#34;&gt;Godot 101 - Part 2&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;helpful-links&#34;&gt;Helpful Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://godotengine.org&#34;&gt;Download Godot Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/kidscancode&#34;&gt;Support Us on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
